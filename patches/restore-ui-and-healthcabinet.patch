diff --git a/.gitignore b/.gitignore
index 4375043..2e81a3a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,4 @@ node_modules/
 npm-debug.log*
 public/version.json
 version.json
+legacy/health_old/
diff --git a/components/health/DeviceStatus.js b/components/health/DeviceStatus.js
deleted file mode 100644
index 4d96dd5..0000000
--- a/components/health/DeviceStatus.js
+++ /dev/null
@@ -1,56 +0,0 @@
-const INPUT_LABELS = {
-  manual: 'Manual',
-  auto: 'Auto',
-};
-
-function formatBattery(value) {
-  if (!Number.isFinite(value)) return '—';
-  return `${Math.max(0, Math.min(100, Math.round(value)))}%`;
-}
-
-export function createDeviceStatus() {
-  const section = document.createElement('section');
-  section.className = 'card device-status';
-  section.innerHTML = `
-    <header class="device-status__header">
-      <h2>Device status</h2>
-    </header>
-    <div class="device-status__badges">
-      <span class="badge" data-online>Online</span>
-      <span class="badge" data-battery>Battery</span>
-      <span class="badge" data-input>●○○ Manual</span>
-    </div>
-  `;
-
-  function update(snapshot) {
-    if (!snapshot) return;
-    const online = section.querySelector('[data-online]');
-    const battery = section.querySelector('[data-battery]');
-    const input = section.querySelector('[data-input]');
-
-    if (online) {
-      if (snapshot.online) {
-        online.textContent = 'Online';
-        online.dataset.status = 'online';
-      } else {
-        const minutes = Number.isFinite(snapshot.offline_min) ? Math.max(1, Math.round(snapshot.offline_min)) : 0;
-        online.textContent = minutes ? `Offline ${minutes}+ min` : 'Offline';
-        online.dataset.status = 'offline';
-      }
-    }
-
-    if (battery) {
-      battery.textContent = `Battery: ${formatBattery(snapshot.battery)}`;
-    }
-
-    if (input) {
-      const label = INPUT_LABELS[snapshot.input] || 'Manual';
-      input.textContent = `●○○ ${label}`;
-      input.dataset.mode = snapshot.input || 'manual';
-    }
-  }
-
-  return { element: section, update };
-}
-
-export default createDeviceStatus;
diff --git a/components/health/DualGauge.js b/components/health/DualGauge.js
deleted file mode 100644
index 0a5d6cf..0000000
--- a/components/health/DualGauge.js
+++ /dev/null
@@ -1,105 +0,0 @@
-const ZONES = [
-  { max: 39, className: 'danger' },
-  { max: 59, className: 'warning' },
-  { max: 79, className: 'success' },
-  { max: 100, className: 'primary' },
-];
-
-function resolveZone(value) {
-  const num = Number.isFinite(value) ? value : 0;
-  return ZONES.find((zone) => num <= zone.max) || ZONES[ZONES.length - 1];
-}
-
-function formatDelta(value) {
-  if (!Number.isFinite(value) || value === 0) return '0';
-  const prefix = value > 0 ? '+' : '';
-  return `${prefix}${value}`;
-}
-
-function setRing(el, value) {
-  if (!el) return;
-  const clamped = Math.max(0, Math.min(100, Number.isFinite(value) ? value : 0));
-  el.style.setProperty('--progress', clamped);
-  const zone = resolveZone(clamped);
-  el.dataset.zone = zone.className;
-}
-
-function updateCard(card, { label, value, delta }) {
-  if (!card) return;
-  const valueEl = card.querySelector('[data-value]');
-  const deltaEl = card.querySelector('[data-delta]');
-  const gaugeEl = card.querySelector('.dual-gauge__ring');
-  const labelEl = card.querySelector('[data-label]');
-  if (labelEl) labelEl.textContent = label;
-  if (valueEl) valueEl.textContent = Number.isFinite(value) ? Math.round(value).toString() : '—';
-  if (deltaEl) {
-    deltaEl.textContent = `Δ 15m · ${formatDelta(delta)}`;
-    deltaEl.dataset.trend = !Number.isFinite(delta)
-      ? 'neutral'
-      : delta > 0
-        ? 'up'
-        : delta < 0
-          ? 'down'
-          : 'neutral';
-  }
-  setRing(gaugeEl, value);
-}
-
-function updateConfidence(container, confidence) {
-  if (!container) return;
-  const confidenceEl = container.querySelector('[data-confidence]');
-  if (!confidenceEl) return;
-  const value = confidence === 'auto' ? 'Auto' : confidence === 'timeout' ? 'Timeout' : 'Manual';
-  confidenceEl.textContent = `●●● ${value}`;
-  confidenceEl.dataset.mode = confidence || 'manual';
-}
-
-export function createDualGauge() {
-  const section = document.createElement('section');
-  section.className = 'card dual-gauge';
-  section.innerHTML = `
-    <div class="dual-gauge__cards">
-      <div class="dual-gauge__card" data-kind="energy">
-        <div class="dual-gauge__ring" aria-hidden="true"><span class="dual-gauge__value" data-value>0</span></div>
-        <div class="dual-gauge__content">
-          <span class="dual-gauge__label" data-label>Energy</span>
-          <span class="dual-gauge__delta" data-delta data-caption>Δ 15m · 0</span>
-        </div>
-      </div>
-      <div class="dual-gauge__card" data-kind="srv">
-        <div class="dual-gauge__ring" aria-hidden="true"><span class="dual-gauge__value" data-value>0</span></div>
-        <div class="dual-gauge__content">
-          <span class="dual-gauge__label" data-label>SRV</span>
-          <span class="dual-gauge__delta" data-delta data-caption>Δ 15m · 0</span>
-        </div>
-      </div>
-    </div>
-    <footer class="dual-gauge__footer">
-      <span class="badge" data-confidence data-mode="manual">●●● Manual</span>
-    </footer>
-  `;
-
-  const cards = {
-    energy: section.querySelector('[data-kind="energy"]'),
-    srv: section.querySelector('[data-kind="srv"]'),
-  };
-
-  function update(snapshot) {
-    if (!snapshot) return;
-    updateCard(cards.energy, {
-      label: 'Energy',
-      value: snapshot.energy,
-      delta: snapshot.delta15m ? snapshot.delta15m.energy : 0,
-    });
-    updateCard(cards.srv, {
-      label: 'SRV',
-      value: snapshot.srv,
-      delta: snapshot.delta15m ? snapshot.delta15m.srv : 0,
-    });
-    updateConfidence(section, snapshot.confidence);
-  }
-
-  return { element: section, update };
-}
-
-export default createDualGauge;
diff --git a/components/health/FactsRow.js b/components/health/FactsRow.js
deleted file mode 100644
index f6f61f6..0000000
--- a/components/health/FactsRow.js
+++ /dev/null
@@ -1,70 +0,0 @@
-import { badgeRules } from '../../health/dashboard-engine.js';
-
-const CHIP_ITEMS = [
-  { key: 'alcohol_yday', label: 'Alcohol (yesterday)' },
-  { key: 'symptoms', label: 'Illness symptoms' },
-  { key: 'energy_adj', label: 'Energy adj.' },
-  { key: 'late_meal', label: 'Late meal' },
-];
-
-function formatChipValue(key, value) {
-  if (key === 'energy_adj') {
-    if (!Number.isFinite(value)) return '0';
-    const prefix = value > 0 ? '+' : '';
-    return `${prefix}${value}`;
-  }
-  if (value == null) return '—';
-  return value ? 'Yes' : 'No';
-}
-
-export function createFactsRow() {
-  const section = document.createElement('section');
-  section.className = 'card facts-row';
-  section.innerHTML = `
-    <div class="facts-row__primary">
-      <article class="facts-row__sleep">
-        <h3>Sleep</h3>
-        <p class="facts-row__sleep-value" data-sleep-value>—</p>
-        <span class="badge" data-sleep-badge>—</span>
-      </article>
-      <div class="facts-row__chips" data-chips></div>
-    </div>
-  `;
-
-  const chipsContainer = section.querySelector('[data-chips]');
-  if (chipsContainer) {
-    CHIP_ITEMS.forEach((item) => {
-      const chip = document.createElement('span');
-      chip.className = 'chip';
-      chip.dataset.key = item.key;
-      chip.innerHTML = `<span class="chip__label">${item.label}</span><span class="chip__value" data-value>—</span>`;
-      chipsContainer.appendChild(chip);
-    });
-  }
-
-  function update(snapshot) {
-    const sleepValueEl = section.querySelector('[data-sleep-value]');
-    const sleepBadgeEl = section.querySelector('[data-sleep-badge]');
-    const hours = snapshot && Number.isFinite(snapshot.sleep_h) ? snapshot.sleep_h : null;
-    if (sleepValueEl) {
-      sleepValueEl.textContent = hours == null ? '—' : `${hours.toFixed(1)} h`;
-    }
-    if (sleepBadgeEl) {
-      sleepBadgeEl.textContent = badgeRules.sleep(hours);
-    }
-
-    CHIP_ITEMS.forEach((item) => {
-      const chip = chipsContainer ? chipsContainer.querySelector(`[data-key="${item.key}"]`) : null;
-      if (!chip) return;
-      const valueEl = chip.querySelector('[data-value]');
-      const raw = snapshot ? snapshot[item.key] : null;
-      if (valueEl) {
-        valueEl.textContent = formatChipValue(item.key, raw);
-      }
-    });
-  }
-
-  return { element: section, update };
-}
-
-export default createFactsRow;
diff --git a/components/health/KpiGrid.js b/components/health/KpiGrid.js
deleted file mode 100644
index 064801a..0000000
--- a/components/health/KpiGrid.js
+++ /dev/null
@@ -1,69 +0,0 @@
-import { badgeRules } from '../../health/dashboard-engine.js';
-
-const KPI_LABELS = [
-  { key: 'wellbeing7', title: 'Wellbeing score (week)' },
-  { key: 'cardio', title: 'Cardio-vascular' },
-  { key: 'risk', title: 'Risk of pathology' },
-  { key: 'arrhythmia', title: 'Arrhythmias' },
-];
-
-function resolveBadge(key, badge, value) {
-  if (badge) return badge;
-  switch (key) {
-    case 'wellbeing7':
-      return badgeRules.wellbeing(value);
-    case 'cardio':
-      return badgeRules.cardio(value);
-    case 'risk':
-      return badgeRules.risk(value);
-    case 'arrhythmia':
-      return badgeRules.arrhythmia(value);
-    default:
-      return '—';
-  }
-}
-
-export function createKpiGrid() {
-  const section = document.createElement('section');
-  section.className = 'card kpi-grid';
-  const list = document.createElement('div');
-  list.className = 'kpi-grid__items';
-
-  KPI_LABELS.forEach((item) => {
-    const card = document.createElement('article');
-    card.className = 'kpi-grid__card';
-    card.dataset.key = item.key;
-    card.innerHTML = `
-      <header class="kpi-grid__header">
-        <h3>${item.title}</h3>
-        <span class="badge" data-badge>—</span>
-      </header>
-      <p class="kpi-grid__value" data-value>0</p>
-    `;
-    list.appendChild(card);
-  });
-
-  section.appendChild(list);
-
-  function update(snapshot) {
-    KPI_LABELS.forEach((item) => {
-      const card = list.querySelector(`[data-key="${item.key}"]`);
-      if (!card) return;
-      const valueEl = card.querySelector('[data-value]');
-      const badgeEl = card.querySelector('[data-badge]');
-      const entry = snapshot ? snapshot[item.key] : null;
-      const value = entry && Number.isFinite(entry.value) ? Math.round(entry.value) : null;
-      if (valueEl) {
-        valueEl.textContent = value == null ? '—' : `${value}`;
-      }
-      if (badgeEl) {
-        const text = resolveBadge(item.key, entry?.badge, value ?? 0);
-        badgeEl.textContent = text;
-      }
-    });
-  }
-
-  return { element: section, update };
-}
-
-export default createKpiGrid;
diff --git a/components/health/NotesCard.js b/components/health/NotesCard.js
deleted file mode 100644
index 4daf21f..0000000
--- a/components/health/NotesCard.js
+++ /dev/null
@@ -1,72 +0,0 @@
-import { dashboard } from '../../stores/dashboard.js';
-
-const SAVE_DELAY = 600;
-
-export function createNotesCard() {
-  const section = document.createElement('section');
-  section.className = 'card notes-card';
-  section.innerHTML = `
-    <header class="notes-card__header">
-      <h2>Notes</h2>
-      <p>Recommendations will appear later (based on Energy / SRV / Stress).</p>
-    </header>
-    <label class="notes-card__field">
-      <span class="visually-hidden">Notes</span>
-      <textarea rows="4" data-notes placeholder="Add personal observations..." spellcheck="false"></textarea>
-      <span class="notes-card__status" aria-live="polite" data-status></span>
-    </label>
-  `;
-
-  const textarea = section.querySelector('[data-notes]');
-  const statusEl = section.querySelector('[data-status]');
-  let saveTimer = null;
-  let lastValue = '';
-  let isFocused = false;
-
-  function scheduleSave(value) {
-    if (saveTimer) {
-      clearTimeout(saveTimer);
-    }
-    if (statusEl) {
-      statusEl.textContent = 'Saving…';
-    }
-    saveTimer = setTimeout(() => {
-      dashboard.updateNotes(value);
-      if (statusEl) {
-        statusEl.textContent = 'Saved';
-      }
-      saveTimer = null;
-    }, SAVE_DELAY);
-  }
-
-  if (textarea) {
-    textarea.addEventListener('input', (event) => {
-      const value = event.target.value;
-      lastValue = value;
-      scheduleSave(value);
-    });
-    textarea.addEventListener('focus', () => {
-      isFocused = true;
-    });
-    textarea.addEventListener('blur', () => {
-      isFocused = false;
-      if (saveTimer || !statusEl) return;
-      statusEl.textContent = '';
-    });
-  }
-
-  function update(notes) {
-    const nextValue = typeof notes === 'string' ? notes : '';
-    if (textarea && !isFocused) {
-      textarea.value = nextValue;
-      lastValue = nextValue;
-    }
-    if (!nextValue && statusEl) {
-      statusEl.textContent = '';
-    }
-  }
-
-  return { element: section, update };
-}
-
-export default createNotesCard;
diff --git a/components/health/RingRow.js b/components/health/RingRow.js
deleted file mode 100644
index 3f33ea9..0000000
--- a/components/health/RingRow.js
+++ /dev/null
@@ -1,74 +0,0 @@
-import { badgeRules } from '../../health/dashboard-engine.js';
-
-const RING_ITEMS = [
-  { key: 'stress', title: 'Stress' },
-  { key: 'burnout', title: 'Burnout' },
-  { key: 'fatigue', title: 'Fatigue' },
-];
-
-export function createRingRow() {
-  const section = document.createElement('section');
-  section.className = 'card ring-row';
-  const ringsContainer = document.createElement('div');
-  ringsContainer.className = 'ring-row__rings';
-
-  RING_ITEMS.forEach((item) => {
-    const card = document.createElement('article');
-    card.className = 'ring-row__card';
-    card.dataset.key = item.key;
-    card.innerHTML = `
-      <div class="ring" aria-hidden="true"></div>
-      <div class="ring__content">
-        <span class="ring__label">${item.title}</span>
-        <span class="ring__value" data-value>0%</span>
-      </div>
-    `;
-    ringsContainer.appendChild(card);
-  });
-
-  const heartCard = document.createElement('article');
-  heartCard.className = 'ring-row__card ring-row__card--heart';
-  heartCard.innerHTML = `
-    <div class="ring__content">
-      <span class="ring__label">Heart age</span>
-      <span class="ring__value" data-heart-value>0</span>
-      <span class="badge" data-heart-badge>—</span>
-    </div>
-  `;
-
-  section.appendChild(ringsContainer);
-  section.appendChild(heartCard);
-
-  function update(snapshot) {
-    RING_ITEMS.forEach((item) => {
-      const card = ringsContainer.querySelector(`[data-key="${item.key}"]`);
-      if (!card) return;
-      const value = snapshot && Number.isFinite(snapshot[item.key]) ? Math.max(0, Math.min(100, Math.round(snapshot[item.key]))) : null;
-      const valueEl = card.querySelector('[data-value]');
-      const ring = card.querySelector('.ring');
-      if (valueEl) {
-        valueEl.textContent = value == null ? '—' : `${value}%`;
-      }
-      if (ring) {
-        const percent = value == null ? 0 : value;
-        ring.style.setProperty('--progress', percent);
-      }
-    });
-
-    const heartValueEl = heartCard.querySelector('[data-heart-value]');
-    const heartBadgeEl = heartCard.querySelector('[data-heart-badge]');
-    const heart = snapshot?.heartAge;
-    const heartValue = heart && Number.isFinite(heart.value) ? Math.round(heart.value) : null;
-    if (heartValueEl) {
-      heartValueEl.textContent = heartValue == null ? '—' : `${heartValue}`;
-    }
-    if (heartBadgeEl) {
-      const badge = heart?.badge || (heartValue == null ? '—' : badgeRules.cardio(heartValue));
-      heartBadgeEl.textContent = badge;
-    }
-  }
-
-  return { element: section, update };
-}
-
-export default createRingRow;
diff --git a/manifest.webmanifest b/manifest.webmanifest
deleted file mode 100644
index 8b01f2c..0000000
--- a/manifest.webmanifest
+++ /dev/null
@@ -1,21 +0,0 @@
-{
-  "name": "Health2099",
-  "short_name": "Health",
-  "start_url": "./pocket_health_link.html",
-  "display": "standalone",
-  "background_color": "#0f172a",
-  "theme_color": "#2563eb",
-  "description": "Unified diary, summary, and map snapshots for wellbeing tracking.",
-  "icons": [
-    {
-      "src": "./assets/icons/icon-192.svg",
-      "sizes": "192x192",
-      "type": "image/svg+xml"
-    },
-    {
-      "src": "./assets/icons/icon-512.svg",
-      "sizes": "512x512",
-      "type": "image/svg+xml"
-    }
-  ]
-}
diff --git a/package.json b/package.json
index 6c059d5..f80b602 100644
--- a/package.json
+++ b/package.json
@@ -4,18 +4,34 @@
   "private": true,
   "description": "Diary, summary, and map snapshots with offline support.",
   "scripts": {
-    "start": "npx serve .",
-    "build": "node scripts/generate-version.mjs",
+    "dev": "next dev",
+    "build": "npm run generate:version && next build",
+    "start": "next start",
+    "lint": "next lint",
+    "generate:version": "node scripts/generate-version.mjs",
     "cap:init": "npx cap init Health2099 com.health2099.app --web-dir . --npm-client npm",
     "cap:copy": "npx cap copy",
     "cap:sync": "npx cap sync",
     "cap:open:android": "npx cap open android"
   },
   "dependencies": {
-    "@capacitor/core": "^5.7.4"
+    "@capacitor/core": "^5.7.4",
+    "clsx": "^2.1.1",
+    "next": "^14.2.5",
+    "react": "^18.3.1",
+    "react-dom": "^18.3.1"
   },
   "devDependencies": {
+    "@capacitor/android": "^5.7.4",
     "@capacitor/cli": "^5.7.4",
-    "@capacitor/android": "^5.7.4"
+    "@types/node": "^20.12.7",
+    "@types/react": "^18.2.79",
+    "@types/react-dom": "^18.2.25",
+    "autoprefixer": "^10.4.17",
+    "eslint": "^8.57.0",
+    "eslint-config-next": "^14.2.5",
+    "postcss": "^8.4.38",
+    "tailwindcss": "^3.4.4",
+    "typescript": "^5.4.5"
   }
 }
diff --git a/scripts/generate-version.mjs b/scripts/generate-version.mjs
index cd2fbe0..d9f81c4 100755
--- a/scripts/generate-version.mjs
+++ b/scripts/generate-version.mjs
@@ -16,6 +16,11 @@ function getGitValue(args) {
   }
 }
 
+function shorten(value) {
+  if (!value) return '';
+  return value.slice(0, 7);
+}
+
 const gitCommit = getGitValue('rev-parse HEAD');
 const envCommit =
   process.env.VERCEL_GIT_COMMIT_SHA ||
@@ -25,162 +30,59 @@ const envCommit =
   '';
 
 const commit = gitCommit || envCommit || 'dev-build';
-
 const gitShort = getGitValue('rev-parse --short HEAD');
-const envShort = shorten(envCommit) || shorten(process.env.GIT_COMMIT) || '';
+const envShort = shorten(envCommit) || shorten(process.env.GIT_COMMIT);
 const commitShort = gitShort || envShort || (commit !== 'dev-build' ? shorten(commit) : '') || 'dev';
 const builtAt = new Date().toISOString();
 
 const versionPayload = JSON.stringify({ commit, builtAt }, null, 2) + '\n';
-
 await fs.mkdir(path.join(ROOT_DIR, 'public'), { recursive: true });
 await fs.writeFile(path.join(ROOT_DIR, 'public', 'version.json'), versionPayload, 'utf8');
 await fs.writeFile(path.join(ROOT_DIR, 'version.json'), versionPayload, 'utf8');
 
-const htmlFiles = [
-  'DiaryPlus.html',
-  'Map.html',
-  'Summary.html',
-  'pocket_health_link.html',
-  path.join('health-cabinet', 'index.html'),
-  path.join('__diagnostics', 'index.html'),
-];
-
-const assetPaths = [
-  '/shared/styles.css',
-  '/shared/sw-client.js',
-  '/shared/storage.js',
-  '/shared/nav-loader.js',
-  '/scripts/diary.js',
-  '/health/health-cabinet-page.js',
-  '/scripts/diagnostics.js',
-];
-
-for (const relative of htmlFiles) {
-  const filePath = path.join(ROOT_DIR, relative);
-  let content = await fs.readFile(filePath, 'utf8');
-  for (const asset of assetPaths) {
-    const pattern = new RegExp(`${escapeRegExp(asset)}(?:\\?v=[^"'\\s]*)?`, 'g');
-    content = content.replace(pattern, `${asset}?v=${commitShort}`);
-  }
-  await fs.writeFile(filePath, content, 'utf8');
-}
-
-await updateSwClient();
-await updateServiceWorker();
-await updateRoutesManifest();
+const routesPayload = JSON.stringify(
+  {
+    generatedAt: builtAt,
+    commit,
+    commitShort,
+    routes: await collectRoutes(),
+  },
+  null,
+  2,
+); 
+await fs.writeFile(path.join(ROOT_DIR, 'public', 'routes.json'), `${routesPayload}\n`, 'utf8');
 
 console.log(`Generated version metadata for ${commitShort} at ${builtAt}`);
 
-async function updateSwClient() {
-  const filePath = path.join(ROOT_DIR, 'shared', 'sw-client.js');
-  let content = await fs.readFile(filePath, 'utf8');
-  content = content
-    .replace(/commit:\s*'[^']*'/, `commit: '${commit}'`)
-    .replace(/commitShort:\s*'[^']*'/, `commitShort: '${commitShort}'`)
-    .replace(/builtAt:\s*'[^']*'/, `builtAt: '${builtAt}'`);
-  await fs.writeFile(filePath, content, 'utf8');
-}
-
-async function updateServiceWorker() {
-  const filePath = path.join(ROOT_DIR, 'service-worker.js');
-  let content = await fs.readFile(filePath, 'utf8');
-  content = content.replace(/const BUILD_VERSION = '[^']*';/, `const BUILD_VERSION = '${commitShort}';`);
-  await fs.writeFile(filePath, content, 'utf8');
-}
-
-async function updateRoutesManifest() {
-  const routes = await collectRoutes();
-  const payload = JSON.stringify(
-    {
-      generatedAt: builtAt,
-      commit,
-      commitShort,
-      routes,
-    },
-    null,
-    2,
-  );
-  await fs.mkdir(path.join(ROOT_DIR, 'public'), { recursive: true });
-  await fs.writeFile(path.join(ROOT_DIR, 'routes.json'), `${payload}\n`, 'utf8');
-  await fs.writeFile(path.join(ROOT_DIR, 'public', 'routes.json'), `${payload}\n`, 'utf8');
-}
-
 async function collectRoutes() {
-  const results = [];
-  await walk('.');
-  return results.sort((a, b) => a.path.localeCompare(b.path));
+  const routes = new Set();
+  const appDir = path.join(ROOT_DIR, 'app');
+  await walk(appDir, '');
+  return Array.from(routes)
+    .map((item) => ({ path: item.path, file: path.relative(ROOT_DIR, item.file) }))
+    .sort((a, b) => a.path.localeCompare(b.path));
+
+  async function walk(currentDir, routePrefix) {
+    let entries = [];
+    try {
+      entries = await fs.readdir(currentDir, { withFileTypes: true });
+    } catch {
+      return;
+    }
 
-  async function walk(relativeDir) {
-    const absolute = path.join(ROOT_DIR, relativeDir);
-    const entries = await fs.readdir(absolute, { withFileTypes: true });
     for (const entry of entries) {
-      const name = entry.name;
-      if (shouldSkip(name)) continue;
-      const relativePath = path.join(relativeDir, name);
+      if (entry.name.startsWith('.')) continue;
+      const absolute = path.join(currentDir, entry.name);
       if (entry.isDirectory()) {
-        if (shouldSkipDirectory(name)) continue;
-        await walk(relativePath);
+        const segment = entry.name.startsWith('(') ? '' : `/${entry.name}`;
+        const nextPrefix = routePrefix + segment;
+        await walk(absolute, nextPrefix);
         continue;
       }
       if (!entry.isFile()) continue;
-      if (!name.toLowerCase().endsWith('.html')) continue;
-      const normalized = normalizePath(relativePath);
-      const routePath = toRoute(normalized);
-      if (!routePath) continue;
-      const filePath = path.join(ROOT_DIR, normalized);
-      let title = '';
-      try {
-        const content = await fs.readFile(filePath, 'utf8');
-        const match = content.match(/<title>([^<]*)<\/title>/i);
-        title = match ? match[1].trim() : '';
-      } catch (error) {
-        console.warn('Failed to read title for route', normalized, error);
-      }
-      results.push({ path: routePath, file: normalized, title });
+      if (!/^page\.(tsx?|jsx?)$/.test(entry.name)) continue;
+      const route = routePrefix || '/';
+      routes.add({ path: route, file: absolute });
     }
   }
 }
-
-function shouldSkip(name) {
-  return name === '.DS_Store' || name === 'Thumbs.db';
-}
-
-function shouldSkipDirectory(name) {
-  return (
-    name.startsWith('.') ||
-    name === 'node_modules' ||
-    name === 'android' ||
-    name === 'assets' ||
-    name === 'docs' ||
-    name === 'includes' ||
-    name === 'components' ||
-    name === 'health' ||
-    name === 'shared' ||
-    name === 'scripts' ||
-    name === 'stores' ||
-    name === 'public'
-  );
-}
-
-function normalizePath(relativePath) {
-  return relativePath.replace(/\\/g, '/').replace(/^\.\//, '');
-}
-
-function toRoute(filePath) {
-  if (!filePath) return null;
-  if (filePath === 'index.html') return '/';
-  if (filePath.endsWith('/index.html')) {
-    return `/${filePath.slice(0, -'index.html'.length)}`;
-  }
-  return `/${filePath}`;
-}
-
-function escapeRegExp(value) {
-  return value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
-}
-
-function shorten(value) {
-  if (!value || typeof value !== 'string') return '';
-  return value.slice(0, 7);
-}
diff --git a/stores/dashboard.js b/stores/dashboard.js
deleted file mode 100644
index da68617..0000000
--- a/stores/dashboard.js
+++ /dev/null
@@ -1,123 +0,0 @@
-const DASHBOARD_NOTES_KEY = 'health_dashboard_notes_v1';
-
-const dashboardFixture = {
-  gauges: { energy: 70, srv: 53, delta15m: { energy: 4, srv: -1 }, confidence: 'manual' },
-  device: { online: false, offline_min: 10, battery: 82, input: 'manual' },
-  kpi: {
-    wellbeing7: { value: 78, badge: 'Normal' },
-    cardio: { value: 89, badge: 'Within acceptable' },
-    risk: { value: 65, badge: 'System acceptable' },
-    arrhythmia: { value: 10, badge: 'Within normal' },
-  },
-  rings: {
-    stress: 30,
-    burnout: 21,
-    fatigue: 41,
-    heartAge: { value: 50, badge: 'Older than biological (+1)' },
-  },
-  facts: {
-    sleep_h: 7.5,
-    alcohol_yday: false,
-    symptoms: false,
-    energy_adj: 10,
-    late_meal: false,
-  },
-  notes: 'Recommendations will appear later (based on Energy / SRV / Stress).',
-};
-
-function clone(value) {
-  return value == null ? value : JSON.parse(JSON.stringify(value));
-}
-
-function readStoredNotes() {
-  if (typeof localStorage === 'undefined') return null;
-  try {
-    const value = localStorage.getItem(DASHBOARD_NOTES_KEY);
-    return value == null ? null : value;
-  } catch (err) {
-    console.warn('[dashboard] Failed to read stored notes', err);
-    return null;
-  }
-}
-
-function persistNotes(next) {
-  if (typeof localStorage === 'undefined') return;
-  try {
-    localStorage.setItem(DASHBOARD_NOTES_KEY, next ?? '');
-  } catch (err) {
-    console.warn('[dashboard] Failed to persist notes', err);
-  }
-}
-
-const listeners = new Set();
-
-const state = {
-  snapshot: prepareInitialSnapshot(),
-};
-
-function prepareInitialSnapshot() {
-  const storedNotes = readStoredNotes();
-  if (storedNotes != null) {
-    return {
-      ...clone(dashboardFixture),
-      notes: storedNotes,
-    };
-  }
-  return clone(dashboardFixture);
-}
-
-function getSnapshot() {
-  return state.snapshot;
-}
-
-function setSnapshot(next) {
-  const prepared = {
-    ...clone(dashboardFixture),
-    ...clone(next || {}),
-  };
-  state.snapshot = prepared;
-  listeners.forEach((listener) => {
-    try {
-      listener(prepared);
-    } catch (err) {
-      console.error('[dashboard] Listener failed', err);
-    }
-  });
-  return prepared;
-}
-
-function updateNotes(notes) {
-  const current = getSnapshot();
-  const nextNotes = typeof notes === 'string' ? notes : '';
-  persistNotes(nextNotes);
-  return setSnapshot({
-    ...current,
-    notes: nextNotes,
-  });
-}
-
-function subscribe(listener) {
-  if (typeof listener !== 'function') return () => {};
-  listeners.add(listener);
-  return () => listeners.delete(listener);
-}
-
-const selectors = {
-  gauges: (snapshot) => snapshot.gauges,
-  device: (snapshot) => snapshot.device,
-  kpi: (snapshot) => snapshot.kpi,
-  rings: (snapshot) => snapshot.rings,
-  facts: (snapshot) => snapshot.facts,
-  notes: (snapshot) => snapshot.notes,
-};
-
-export const dashboard = {
-  fixture: dashboardFixture,
-  getSnapshot,
-  set: setSnapshot,
-  updateNotes,
-  subscribe,
-  selectors,
-};
-
-export default dashboard;
diff --git a/stores/dashboard.ts b/stores/dashboard.ts
index a2a436b..145519e 100644
--- a/stores/dashboard.ts
+++ b/stores/dashboard.ts
@@ -1,76 +1,298 @@
-export type GaugeConfidence = 'manual' | 'auto' | 'timeout';
+import { useSyncExternalStore } from 'react';
 
-export interface DashboardGaugeDelta {
+export type GaugeSnapshot = {
   energy: number;
   srv: number;
-}
-
-export interface DashboardGauges {
-  energy: number;
-  srv: number;
-  delta15m: DashboardGaugeDelta;
-  confidence: GaugeConfidence;
-}
+  delta15m: {
+    energy: number;
+    srv: number;
+  };
+  confidence: 'manual' | 'auto' | 'timeout' | string;
+};
 
-export interface DashboardDeviceStatus {
+export type DeviceSnapshot = {
   online: boolean;
   offline_min: number;
   battery: number;
-  input: 'manual' | 'auto';
-}
+  input: 'manual' | 'auto' | 'timeout' | string;
+};
 
-export interface DashboardBadge {
+export type KpiEntry = {
   value: number;
   badge: string;
-}
-
-export interface DashboardKpi {
-  wellbeing7: DashboardBadge;
-  cardio: DashboardBadge;
-  risk: DashboardBadge;
-  arrhythmia: DashboardBadge;
-}
+};
 
-export interface DashboardRings {
+export type RingsSnapshot = {
   stress: number;
   burnout: number;
   fatigue: number;
-  heartAge: DashboardBadge;
-}
+  heartAge: {
+    value: number;
+    badge: string;
+  };
+};
 
-export interface DashboardFacts {
-  sleep_h: number | null;
-  alcohol_yday: boolean | null;
-  symptoms: boolean | null;
+export type FactsSnapshot = {
+  sleep_h: number;
+  alcohol_yday: boolean;
+  symptoms: boolean;
   energy_adj: number;
-  late_meal: boolean | null;
-}
+  late_meal: boolean;
+};
 
-export interface DashboardSnapshot {
-  gauges: DashboardGauges;
-  device: DashboardDeviceStatus;
-  kpi: DashboardKpi;
-  rings: DashboardRings;
-  facts: DashboardFacts;
+export type DashboardSnapshot = {
+  gauges: GaugeSnapshot;
+  device: DeviceSnapshot;
+  kpi: {
+    wellbeing7: KpiEntry;
+    cardio: KpiEntry;
+    risk: KpiEntry;
+    arrhythmia: KpiEntry;
+  };
+  rings: RingsSnapshot;
+  facts: FactsSnapshot;
   notes: string;
+};
+
+const DASHBOARD_NOTES_KEY = 'health_dashboard_notes_v1';
+
+const dashboardFixture: DashboardSnapshot = {
+  gauges: { energy: 70, srv: 53, delta15m: { energy: 4, srv: -1 }, confidence: 'manual' },
+  device: { online: false, offline_min: 10, battery: 82, input: 'manual' },
+  kpi: {
+    wellbeing7: { value: 78, badge: 'Normal' },
+    cardio: { value: 89, badge: 'Within acceptable' },
+    risk: { value: 65, badge: 'System acceptable' },
+    arrhythmia: { value: 10, badge: 'Within normal' },
+  },
+  rings: {
+    stress: 30,
+    burnout: 21,
+    fatigue: 41,
+    heartAge: { value: 50, badge: 'Older than biological (+1)' },
+  },
+  facts: {
+    sleep_h: 7.5,
+    alcohol_yday: false,
+    symptoms: false,
+    energy_adj: 10,
+    late_meal: false,
+  },
+  notes: 'Recommendations will appear later (based on Energy / SRV / Stress).',
+};
+
+const listeners = new Set<() => void>();
+
+function clone<T>(value: T): T {
+  return value == null ? value : JSON.parse(JSON.stringify(value));
 }
 
-export interface DashboardSelectors {
-  gauges: (snapshot: DashboardSnapshot) => DashboardGauges;
-  device: (snapshot: DashboardSnapshot) => DashboardDeviceStatus;
-  kpi: (snapshot: DashboardSnapshot) => DashboardKpi;
-  rings: (snapshot: DashboardSnapshot) => DashboardRings;
-  facts: (snapshot: DashboardSnapshot) => DashboardFacts;
-  notes: (snapshot: DashboardSnapshot) => string;
+function clamp(value: unknown, min = 0, max = 100): number {
+  const num = Number.isFinite(value as number) ? Number(value) : Number(min);
+  if (num < min) return min;
+  if (num > max) return max;
+  return Math.round(num);
 }
 
-export interface DashboardStore {
-  fixture: DashboardSnapshot;
-  getSnapshot: () => DashboardSnapshot;
-  set: (snapshot: DashboardSnapshot) => DashboardSnapshot;
-  updateNotes: (text: string) => DashboardSnapshot;
-  subscribe: (listener: (snapshot: DashboardSnapshot) => void) => () => void;
-  selectors: DashboardSelectors;
+export const badgeRules = {
+  wellbeing(value: number) {
+    if (value >= 85) return 'Excellent';
+    if (value >= 75) return 'Good';
+    if (value >= 60) return 'Normal';
+    return 'Low';
+  },
+  cardio(value: number) {
+    if (value >= 85) return 'Excellent';
+    if (value >= 70) return 'Within acceptable';
+    if (value >= 50) return 'Needs attention';
+    return 'Low';
+  },
+  risk(value: number) {
+    if (value <= 35) return 'Low';
+    if (value <= 65) return 'System acceptable';
+    return 'Elevated';
+  },
+  arrhythmia(value: number) {
+    if (value <= 10) return 'Within normal';
+    if (value <= 25) return 'Watch';
+    return 'Elevated';
+  },
+  sleep(hours?: number | null) {
+    if (hours == null) return '—';
+    if (hours >= 7 && hours <= 9) return 'Within normal';
+    if (hours < 7) return 'Short';
+    return 'Long';
+  },
+};
+
+function readStoredNotes(): string | null {
+  if (typeof window === 'undefined' || typeof localStorage === 'undefined') {
+    return null;
+  }
+  try {
+    const value = localStorage.getItem(DASHBOARD_NOTES_KEY);
+    return value == null ? null : value;
+  } catch (error) {
+    console.warn('[dashboard] Failed to read stored notes', error);
+    return null;
+  }
 }
 
-export { dashboard as default, dashboard } from './dashboard.js';
+function persistNotes(next: string) {
+  if (typeof window === 'undefined' || typeof localStorage === 'undefined') {
+    return;
+  }
+  try {
+    localStorage.setItem(DASHBOARD_NOTES_KEY, next ?? '');
+  } catch (error) {
+    console.warn('[dashboard] Failed to persist notes', error);
+  }
+}
+
+function sanitizeSnapshot(source?: Partial<DashboardSnapshot> | null): DashboardSnapshot {
+  const base = dashboardFixture;
+  const snapshot = source ?? {};
+  const gaugesSource = snapshot.gauges ?? {};
+  const deltaSource = gaugesSource.delta15m ?? {};
+  const deviceSource = snapshot.device ?? {};
+  const kpiSource = snapshot.kpi ?? {};
+  const ringsSource = snapshot.rings ?? {};
+  const factsSource = snapshot.facts ?? {};
+
+  const energy = clamp(gaugesSource.energy ?? base.gauges.energy);
+  const srv = clamp(gaugesSource.srv ?? base.gauges.srv);
+  const energyDelta = Number.isFinite(deltaSource.energy) ? Math.round(Number(deltaSource.energy)) : base.gauges.delta15m.energy;
+  const srvDelta = Number.isFinite(deltaSource.srv) ? Math.round(Number(deltaSource.srv)) : base.gauges.delta15m.srv;
+  const confidence = (gaugesSource.confidence ?? base.gauges.confidence) as GaugeSnapshot['confidence'];
+
+  const battery = clamp(deviceSource.battery ?? base.device.battery);
+  const offlineMinutes = Number.isFinite(deviceSource.offline_min)
+    ? Math.max(0, Math.round(Number(deviceSource.offline_min)))
+    : base.device.offline_min;
+
+  const wellbeingValue = clamp(kpiSource.wellbeing7?.value ?? base.kpi.wellbeing7.value);
+  const cardioValue = clamp(kpiSource.cardio?.value ?? base.kpi.cardio.value);
+  const riskValue = clamp(kpiSource.risk?.value ?? base.kpi.risk.value);
+  const arrhythmiaValue = clamp(kpiSource.arrhythmia?.value ?? base.kpi.arrhythmia.value);
+
+  const sleepHours = Number.isFinite(factsSource.sleep_h) ? Number(factsSource.sleep_h) : base.facts.sleep_h;
+
+  return {
+    gauges: {
+      energy,
+      srv,
+      delta15m: { energy: energyDelta, srv: srvDelta },
+      confidence,
+    },
+    device: {
+      online: deviceSource.online ?? base.device.online,
+      offline_min: offlineMinutes,
+      battery,
+      input: (deviceSource.input ?? base.device.input) as DeviceSnapshot['input'],
+    },
+    kpi: {
+      wellbeing7: {
+        value: wellbeingValue,
+        badge: kpiSource.wellbeing7?.badge ?? badgeRules.wellbeing(wellbeingValue),
+      },
+      cardio: {
+        value: cardioValue,
+        badge: kpiSource.cardio?.badge ?? badgeRules.cardio(cardioValue),
+      },
+      risk: {
+        value: riskValue,
+        badge: kpiSource.risk?.badge ?? badgeRules.risk(riskValue),
+      },
+      arrhythmia: {
+        value: arrhythmiaValue,
+        badge: kpiSource.arrhythmia?.badge ?? badgeRules.arrhythmia(arrhythmiaValue),
+      },
+    },
+    rings: {
+      stress: clamp(ringsSource.stress ?? base.rings.stress),
+      burnout: clamp(ringsSource.burnout ?? base.rings.burnout),
+      fatigue: clamp(ringsSource.fatigue ?? base.rings.fatigue),
+      heartAge: {
+        value: clamp(ringsSource.heartAge?.value ?? base.rings.heartAge.value, 0, 120),
+        badge: ringsSource.heartAge?.badge ?? base.rings.heartAge.badge,
+      },
+    },
+    facts: {
+      sleep_h: sleepHours,
+      alcohol_yday: factsSource.alcohol_yday ?? base.facts.alcohol_yday,
+      symptoms: factsSource.symptoms ?? base.facts.symptoms,
+      energy_adj: Number.isFinite(factsSource.energy_adj)
+        ? Math.round(Number(factsSource.energy_adj))
+        : base.facts.energy_adj,
+      late_meal: factsSource.late_meal ?? base.facts.late_meal,
+    },
+    notes: typeof snapshot.notes === 'string' ? snapshot.notes : base.notes,
+  };
+}
+
+const fallbackSnapshot = sanitizeSnapshot(null);
+
+function prepareInitialSnapshot(): DashboardSnapshot {
+  const storedNotes = readStoredNotes();
+  if (storedNotes != null) {
+    return sanitizeSnapshot({ notes: storedNotes });
+  }
+  return fallbackSnapshot;
+}
+
+let state: DashboardSnapshot = prepareInitialSnapshot();
+
+function emit() {
+  listeners.forEach((listener) => {
+    try {
+      listener();
+    } catch (error) {
+      console.error('[dashboard] Listener failed', error);
+    }
+  });
+}
+
+function setSnapshot(next?: Partial<DashboardSnapshot>) {
+  state = sanitizeSnapshot({ ...clone(state), ...clone(next ?? {}) });
+  emit();
+  return state;
+}
+
+function updateNotes(notes: string) {
+  const nextNotes = typeof notes === 'string' ? notes : '';
+  persistNotes(nextNotes);
+  return setSnapshot({ ...state, notes: nextNotes });
+}
+
+function subscribe(listener: () => void) {
+  listeners.add(listener);
+  return () => listeners.delete(listener);
+}
+
+export const selectors = {
+  gauges: (snapshot: DashboardSnapshot) => snapshot.gauges,
+  device: (snapshot: DashboardSnapshot) => snapshot.device,
+  kpi: (snapshot: DashboardSnapshot) => snapshot.kpi,
+  rings: (snapshot: DashboardSnapshot) => snapshot.rings,
+  facts: (snapshot: DashboardSnapshot) => snapshot.facts,
+  notes: (snapshot: DashboardSnapshot) => snapshot.notes,
+};
+
+export function getSnapshot() {
+  return state;
+}
+
+export function useDashboard<T>(selector: (snapshot: DashboardSnapshot) => T): T {
+  return useSyncExternalStore(subscribe, () => selector(state), () => selector(fallbackSnapshot));
+}
+
+export const dashboard = {
+  fixture: fallbackSnapshot,
+  getSnapshot,
+  setSnapshot,
+  updateNotes,
+  subscribe,
+  selectors,
+};
+
+export default dashboard;
