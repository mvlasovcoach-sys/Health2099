diff -ruN legacy/health_old/app/__diagnostics/page.tsx app/__diagnostics/page.tsx
--- legacy/health_old/app/__diagnostics/page.tsx	1970-01-01 00:00:00.000000000 +0000
+++ app/__diagnostics/page.tsx	2025-10-08 07:43:25.900932353 +0000
@@ -0,0 +1,20 @@
+import DiagnosticsPanel from '@/components/diagnostics/DiagnosticsPanel';
+
+export const metadata = {
+  title: 'Diagnostics • Health 2099',
+};
+
+export default function DiagnosticsPage() {
+  return (
+    <div className="container flow">
+      <header className="page-header">
+        <div className="page-header__content">
+          <span className="page-header__eyebrow">System</span>
+          <h1>Diagnostics</h1>
+          <p>Route manifest, build metadata, and CSS visibility for quick debugging.</p>
+        </div>
+      </header>
+      <DiagnosticsPanel />
+    </div>
+  );
+}
diff -ruN legacy/health_old/app/diary/page.tsx app/diary/page.tsx
--- legacy/health_old/app/diary/page.tsx	1970-01-01 00:00:00.000000000 +0000
+++ app/diary/page.tsx	2025-10-08 07:41:51.257484574 +0000
@@ -0,0 +1,24 @@
+export const metadata = {
+  title: 'Diary • Health 2099',
+};
+
+export default function DiaryPage() {
+  return (
+    <div className="container flow">
+      <header className="page-header">
+        <div className="page-header__content">
+          <span className="page-header__eyebrow">Journal</span>
+          <h1>Diary</h1>
+          <p>Daily entries will return once the migration is complete.</p>
+        </div>
+      </header>
+      <section className="card">
+        <h2>Diary data is not yet connected</h2>
+        <p>
+          While the new interface is restored you can explore the Health cabinet for real-time
+          metrics and diagnostics.
+        </p>
+      </section>
+    </div>
+  );
+}
diff -ruN legacy/health_old/app/globals.css app/globals.css
--- legacy/health_old/app/globals.css	1970-01-01 00:00:00.000000000 +0000
+++ app/globals.css	2025-10-08 07:37:08.943139708 +0000
@@ -0,0 +1,1556 @@
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+/* Legacy theme styles */
+:root {
+  --theme-mode: dark;
+  color-scheme: var(--theme-mode);
+  --font-sans: 'Inter', 'Segoe UI', system-ui, -apple-system, BlinkMacSystemFont, 'Helvetica Neue', sans-serif;
+  --space-1: 0.25rem;
+  --space-2: 0.5rem;
+  --space-3: 0.75rem;
+  --space-4: 1rem;
+  --space-5: 1.5rem;
+  --space-6: 2rem;
+  --space-7: 3rem;
+  --radius-xs: 6px;
+  --radius-sm: 12px;
+  --radius-card: 20px;
+  --radius-lg: var(--radius-card);
+  --shadow-xs: 0 1px 3px rgba(15, 23, 42, 0.32);
+  --shadow-sm: 0 18px 60px rgba(2, 6, 23, 0.32);
+  --shadow-glow: 0 45px 120px rgba(2, 6, 23, 0.45);
+  --glass-blur: 22px;
+  --glass-border-color: rgba(148, 163, 184, 0.32);
+  --glass-border: 1px solid var(--glass-border-color);
+  --glass-surface: rgba(15, 23, 42, 0.58);
+  --color-bg-base: radial-gradient(circle at top, #0f172a 0%, #020617 65%);
+  --color-bg-card: rgba(15, 23, 42, 0.72);
+  --color-bg-card-alt: rgba(15, 23, 42, 0.58);
+  --color-bg-muted: rgba(71, 85, 105, 0.16);
+  --color-border: rgba(148, 163, 184, 0.22);
+  --text-primary: #e2e8f0;
+  --text-heading: #f8fafc;
+  --text-muted: #cbd5f5;
+  --text-inverse: #020617;
+  --color-primary: #60a5fa;
+  --color-primary-soft: rgba(96, 165, 250, 0.22);
+  --color-success: #34d399;
+  --color-warning: #facc15;
+  --color-danger: #f87171;
+  --color-info: #38bdf8;
+  --gradient-movement: linear-gradient(135deg, #1e40af 0%, #38bdf8 100%);
+  --gradient-recovery: linear-gradient(135deg, #0f766e 0%, #2dd4bf 100%);
+  --gradient-focus: linear-gradient(135deg, #7c3aed 0%, #c4b5fd 100%);
+  --gradient-transport: linear-gradient(135deg, #0369a1 0%, #0ea5e9 100%);
+  --gradient-food: linear-gradient(135deg, #be123c 0%, #f97316 100%);
+  --gradient-household: linear-gradient(135deg, #1f2937 0%, #4b5563 100%);
+  --gradient-social: linear-gradient(135deg, #6d28d9 0%, #f472b6 100%);
+  --gradient-other: linear-gradient(135deg, #0f172a 0%, #475569 100%);
+  --nav-width: min(280px, 100%);
+  --color-nav-bg: rgba(2, 6, 23, 0.92);
+  --color-nav-border: rgba(51, 65, 85, 0.65);
+  --color-nav-text: rgba(226, 232, 240, 0.82);
+  --color-nav-hover-bg: rgba(30, 41, 59, 0.82);
+  --color-nav-active-bg: rgba(16, 185, 129, 0.18);
+  --color-nav-active-border: rgba(16, 185, 129, 0.45);
+  --color-nav-active-text: #ecfdf5;
+  --color-nav-brand: #f8fafc;
+  --sidebar-width: 240px;
+  --color-app-bg: var(--color-bg-base);
+  --color-app-bg-muted: var(--color-bg-muted);
+  --color-surface: var(--color-bg-card);
+  --color-surface-alt: var(--color-bg-card-alt);
+  --color-muted: var(--text-muted);
+  --color-text: var(--text-primary);
+  --color-heading: var(--text-heading);
+}
+
+:root[data-theme='light'],
+:root[style*='--theme-mode:light'] {
+  --theme-mode: light;
+  --color-bg-base: linear-gradient(160deg, #eef2ff 0%, #f8fafc 40%, #ffffff 100%);
+  --color-bg-card: rgba(255, 255, 255, 0.9);
+  --color-bg-card-alt: rgba(248, 250, 252, 0.85);
+  --color-bg-muted: rgba(148, 163, 184, 0.1);
+  --color-border: rgba(148, 163, 184, 0.28);
+  --shadow-xs: 0 1px 3px rgba(15, 23, 42, 0.1);
+  --shadow-sm: 0 12px 34px rgba(15, 23, 42, 0.12);
+  --shadow-glow: 0 60px 160px rgba(37, 99, 235, 0.22);
+  --text-primary: #0f172a;
+  --text-heading: #111827;
+  --text-muted: #64748b;
+  --text-inverse: #ffffff;
+  --color-primary: #2563eb;
+  --color-primary-soft: rgba(37, 99, 235, 0.14);
+  --color-success: #16a34a;
+  --color-warning: #f97316;
+  --color-danger: #dc2626;
+  --color-info: #0ea5e9;
+  --glass-surface: rgba(255, 255, 255, 0.72);
+  --glass-border-color: rgba(148, 163, 184, 0.35);
+  --color-nav-bg: rgba(15, 23, 42, 0.94);
+  --color-nav-border: rgba(15, 23, 42, 0.65);
+  --color-nav-text: rgba(241, 245, 249, 0.84);
+  --color-nav-hover-bg: rgba(30, 41, 59, 0.86);
+  --color-nav-active-bg: rgba(37, 99, 235, 0.2);
+  --color-nav-active-border: rgba(37, 99, 235, 0.45);
+  --color-nav-active-text: #eff6ff;
+  --color-nav-brand: #111827;
+  --color-app-bg: var(--color-bg-base);
+  --color-app-bg-muted: var(--color-bg-muted);
+  --color-surface: var(--color-bg-card);
+  --color-surface-alt: var(--color-bg-card-alt);
+  --color-muted: var(--text-muted);
+  --color-text: var(--text-primary);
+  --color-heading: var(--text-heading);
+}
+
+.visually-hidden {
+  position: absolute !important;
+  width: 1px;
+  height: 1px;
+  padding: 0;
+  margin: -1px;
+  overflow: hidden;
+  clip: rect(0, 0, 0, 0);
+  white-space: nowrap;
+  border: 0;
+}
+
+html {
+  font-size: 16px;
+}
+
+body {
+  margin: 0;
+  font-family: var(--font-sans);
+  background: var(--color-app-bg);
+  color: var(--color-text);
+  min-height: 100vh;
+  line-height: 1.6;
+}
+
+* {
+  box-sizing: border-box;
+}
+
+img {
+  max-width: 100%;
+  height: auto;
+  display: block;
+}
+
+a {
+  color: inherit;
+  text-decoration: none;
+}
+
+a:hover,
+a:focus {
+  text-decoration: underline;
+}
+
+.app-shell {
+  display: flex;
+  flex-direction: column;
+  min-height: 100vh;
+  background-image: var(--color-app-bg);
+  background-size: cover;
+  background-attachment: fixed;
+}
+
+@media (min-width: 960px) {
+  .app-shell {
+    flex-direction: row;
+  }
+}
+
+[data-include='nav'] {
+  display: contents;
+}
+
+.sidebar {
+  position: fixed;
+  inset: 0 auto 0 0;
+  width: var(--sidebar-width);
+  background: var(--color-nav-bg);
+  color: var(--color-nav-text);
+  padding: 24px;
+  border-right: 1px solid var(--color-nav-border);
+  display: flex;
+  flex-direction: column;
+  gap: 20px;
+  z-index: 20;
+}
+
+.brand {
+  font-weight: 700;
+  font-size: 1.35rem;
+}
+
+.brand-link {
+  color: var(--color-nav-brand);
+  text-decoration: none;
+}
+
+.build-badge {
+  display: inline-flex;
+  align-items: center;
+  gap: 0.25rem;
+  margin-top: 0.35rem;
+  padding: 0.2rem 0.55rem;
+  border-radius: 999px;
+  background: rgba(45, 212, 191, 0.16);
+  color: rgba(203, 213, 225, 0.9);
+  font-size: 0.65rem;
+  letter-spacing: 0.06em;
+  text-transform: uppercase;
+  white-space: nowrap;
+}
+
+.build-badge:hover,
+.build-badge:focus {
+  background: rgba(45, 212, 191, 0.28);
+}
+
+.nav {
+  display: flex;
+  flex-direction: column;
+  gap: 8px;
+}
+
+.nav-link {
+  display: flex;
+  align-items: center;
+  gap: 10px;
+  padding: 0.65rem 0.75rem;
+  color: var(--color-nav-text);
+  text-decoration: none;
+  border-radius: 12px;
+  transition: background 0.2s ease, color 0.2s ease, border-color 0.2s ease;
+}
+
+.nav-link:hover,
+.nav-link:focus-visible {
+  background: var(--color-nav-hover-bg);
+  outline: none;
+}
+
+.nav-link.active {
+  background: var(--color-nav-active-bg);
+  border: 1px solid var(--color-nav-active-border);
+  color: var(--color-nav-active-text);
+}
+
+.app-main {
+  flex: 1;
+  padding: clamp(var(--space-4), 2vw + 1rem, var(--space-7));
+  display: flex;
+  align-items: flex-start;
+  justify-content: center;
+  margin-left: var(--sidebar-width);
+}
+
+button,
+input,
+select,
+textarea {
+  font: inherit;
+}
+
+.btn {
+  padding: 0.55rem 0.8rem;
+  border-radius: 12px;
+  border: 1px solid var(--color-border);
+  background: #fff;
+  cursor: pointer;
+  transition: box-shadow 0.15s ease, transform 0.15s ease;
+}
+
+.btn:hover:not(:disabled) {
+  box-shadow: 0 1px 0 rgba(15, 23, 42, 0.08);
+}
+
+.btn:disabled {
+  opacity: 0.6;
+  cursor: not-allowed;
+}
+
+.btn.primary {
+  background: var(--color-success);
+  border-color: var(--color-success);
+  color: #fff;
+}
+
+.btn.primary:hover:not(:disabled) {
+  background: #15803d;
+}
+
+.btn.ghost {
+  background: var(--color-app-bg-muted);
+}
+
+.btn.ghost:hover:not(:disabled) {
+  background: rgba(148, 163, 184, 0.2);
+}
+
+.chip {
+  padding: 0.45rem 0.7rem;
+  border-radius: 999px;
+  border: 1px solid var(--color-border);
+  background: #fff;
+  cursor: pointer;
+  transition: background 0.2s ease, border-color 0.2s ease;
+}
+
+.chip.active {
+  background: rgba(16, 185, 129, 0.08);
+  border-color: rgba(16, 185, 129, 0.35);
+  color: #047857;
+}
+
+.chip-group {
+  display: flex;
+  flex-wrap: wrap;
+  gap: 0.5rem;
+}
+
+.input {
+  padding: 0.55rem 0.7rem;
+  border: 1px solid var(--color-border);
+  border-radius: 12px;
+  background: #fff;
+}
+
+.panel {
+  background: var(--color-surface);
+  border: 1px solid var(--color-border);
+  border-radius: var(--radius-lg);
+  padding: var(--space-4);
+  box-shadow: var(--shadow-xs);
+}
+
+.toolbar {
+  display: flex;
+  flex-wrap: wrap;
+  gap: 0.75rem;
+  align-items: center;
+  margin-bottom: var(--space-4);
+}
+
+.toolbar .input {
+  min-width: 200px;
+}
+
+.toolbar .search-field {
+  flex: 1 1 220px;
+  max-width: 420px;
+}
+
+.muted {
+  color: var(--color-muted);
+}
+
+.map {
+  width: 100%;
+  min-height: 420px;
+  height: 62vh;
+  border-radius: 16px;
+  overflow: hidden;
+}
+
+.map-layout {
+  display: grid;
+  grid-template-columns: 1fr 320px;
+  gap: var(--space-4);
+}
+
+.list {
+  list-style: none;
+  margin: 0;
+  padding: 0;
+  max-height: 60vh;
+  overflow: auto;
+}
+
+.item {
+  display: flex;
+  gap: 0.5rem;
+  align-items: center;
+  padding: 0.65rem 0.35rem;
+  border-bottom: 1px solid rgba(148, 163, 184, 0.2);
+}
+
+.item:last-child {
+  border-bottom: none;
+}
+
+.item button {
+  margin-left: auto;
+}
+
+@media (max-width: 1024px) {
+  .sidebar {
+    position: sticky;
+    top: 0;
+    inset: auto;
+    width: auto;
+    flex-direction: row;
+    align-items: center;
+    justify-content: space-between;
+    gap: 16px;
+    padding: 16px;
+    border-right: none;
+    border-bottom: 1px solid var(--color-nav-border);
+  }
+
+  .nav {
+    flex-direction: row;
+    flex-wrap: wrap;
+    gap: 8px;
+  }
+
+  .nav-link {
+    padding: 0.5rem 0.75rem;
+  }
+
+  .app-main {
+    margin-left: 0;
+    padding: var(--space-4);
+  }
+
+  .map-layout {
+    grid-template-columns: 1fr;
+  }
+
+  .map {
+    height: 56vh;
+  }
+}
+
+.container {
+  width: min(1120px, 100%);
+  margin: 0 auto;
+}
+
+.flow > * + * {
+  margin-top: var(--space-5);
+}
+
+.page-header {
+  display: grid;
+  gap: var(--space-3);
+  padding: var(--space-5);
+  border-radius: var(--radius-lg);
+  background: var(--color-surface);
+  border: 1px solid var(--color-border);
+  box-shadow: var(--shadow-sm);
+  position: relative;
+  overflow: hidden;
+}
+
+.page-header__content {
+  display: grid;
+  gap: var(--space-3);
+}
+
+.page-header::after {
+  content: '';
+  position: absolute;
+  inset: auto -40% -40% auto;
+  width: 320px;
+  height: 320px;
+  background: var(--color-primary-soft);
+  border-radius: 50%;
+  filter: blur(0px);
+  opacity: 0.6;
+  pointer-events: none;
+}
+
+.page-header__eyebrow {
+  font-size: 0.8rem;
+  font-weight: 600;
+  text-transform: uppercase;
+  letter-spacing: 0.18em;
+  color: var(--color-muted);
+}
+
+.page-header h1 {
+  margin: 0;
+  font-size: clamp(2rem, 2.6vw + 1rem, 3rem);
+  font-weight: 700;
+  color: var(--color-heading);
+}
+
+.page-header p {
+  margin: 0;
+  max-width: 60ch;
+  color: var(--color-muted);
+}
+
+.page-header__meta {
+  position: absolute;
+  top: var(--space-4);
+  right: var(--space-4);
+  display: grid;
+  gap: var(--space-2);
+  justify-items: end;
+  text-align: right;
+}
+
+.page-header__meta .badge {
+  box-shadow: var(--shadow-xs);
+}
+
+.page-header__badge--version {
+  background: rgba(56, 189, 248, 0.22);
+  color: var(--color-info);
+}
+
+@media (max-width: 720px) {
+  .page-header__meta {
+    position: static;
+    justify-items: start;
+    text-align: left;
+  }
+
+  .page-header.health-dashboard__hero {
+    padding-top: calc(var(--space-5) + 2.5rem);
+  }
+}
+
+.card-grid {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+  gap: var(--space-4);
+}
+
+.card {
+  background: var(--color-surface);
+  border: 1px solid var(--color-border);
+  border-radius: var(--radius-lg);
+  padding: var(--space-4);
+  box-shadow: var(--shadow-xs);
+  display: grid;
+  gap: var(--space-2);
+}
+
+.card--accent {
+  background: var(--color-surface-alt);
+}
+
+.card--settings {
+  align-content: flex-start;
+  background: var(--color-surface-alt);
+  border-style: dashed;
+}
+
+.card--settings .button {
+  justify-self: start;
+}
+
+.card h2,
+.card h3 {
+  margin: 0;
+  font-size: 0.95rem;
+  text-transform: uppercase;
+  letter-spacing: 0.08em;
+  font-weight: 600;
+  color: var(--color-muted);
+}
+
+.card strong {
+  font-size: clamp(1.5rem, 1.2vw + 1.2rem, 2.4rem);
+  font-weight: 700;
+  color: var(--color-heading);
+}
+
+.card p {
+  margin: 0;
+  color: var(--color-muted);
+}
+
+.health-dashboard {
+  display: grid;
+  gap: var(--space-4);
+  padding-bottom: var(--space-6);
+}
+
+.health-dashboard__top {
+  display: grid;
+  gap: var(--space-4);
+}
+
+@media (min-width: 960px) {
+  .health-dashboard__top {
+    grid-template-columns: minmax(0, 2fr) minmax(0, 1fr);
+  }
+}
+
+.health-dashboard__kpi,
+.health-dashboard__rings,
+.health-dashboard__facts,
+.health-dashboard__notes {
+  display: contents;
+}
+
+.dual-gauge {
+  padding: var(--space-4) var(--space-4) var(--space-3);
+}
+
+.dual-gauge__cards {
+  display: grid;
+  gap: var(--space-4);
+}
+
+@media (min-width: 640px) {
+  .dual-gauge__cards {
+    grid-template-columns: repeat(2, minmax(0, 1fr));
+  }
+}
+
+.dual-gauge__card {
+  display: grid;
+  grid-template-columns: auto 1fr;
+  gap: var(--space-3);
+  align-items: center;
+}
+
+.dual-gauge__ring {
+  --progress: 0;
+  --gauge-color: var(--color-primary);
+  width: 120px;
+  height: 120px;
+  border-radius: 50%;
+  background: conic-gradient(var(--gauge-color) calc(var(--progress) * 1%), rgba(148, 163, 184, 0.2) 0);
+  position: relative;
+  transition: background 0.22s ease;
+  display: grid;
+  place-items: center;
+}
+
+.dual-gauge__ring::after {
+  content: '';
+  position: absolute;
+  inset: 18px;
+  border-radius: 50%;
+  background: var(--color-surface);
+  box-shadow: inset 0 0 0 1px rgba(148, 163, 184, 0.16);
+  z-index: 0;
+}
+
+.dual-gauge__ring[data-zone='danger'] {
+  --gauge-color: var(--color-danger);
+}
+
+.dual-gauge__ring[data-zone='warning'] {
+  --gauge-color: var(--color-warning);
+}
+
+.dual-gauge__ring[data-zone='success'] {
+  --gauge-color: var(--color-success);
+}
+
+.dual-gauge__content {
+  display: grid;
+  gap: var(--space-1);
+}
+
+.dual-gauge__label {
+  font-size: 0.75rem;
+  text-transform: uppercase;
+  letter-spacing: 0.1em;
+  color: var(--color-muted);
+}
+
+.dual-gauge__value {
+  font-size: clamp(1.8rem, 2.4vw + 1rem, 2.8rem);
+  font-weight: 700;
+  color: var(--color-heading);
+  font-variant-numeric: tabular-nums;
+  position: relative;
+  z-index: 1;
+}
+
+.dual-gauge__delta {
+  font-size: 0.85rem;
+  color: var(--color-muted);
+  font-variant-numeric: tabular-nums;
+}
+
+.dual-gauge__delta[data-trend='up'] {
+  color: var(--color-success);
+}
+
+.dual-gauge__delta[data-trend='down'] {
+  color: var(--color-danger);
+}
+
+.dual-gauge__footer {
+  margin-top: var(--space-3);
+}
+
+.dual-gauge [data-confidence][data-mode='auto'] {
+  background: rgba(14, 165, 233, 0.18);
+  color: var(--color-info);
+}
+
+.dual-gauge [data-confidence][data-mode='timeout'] {
+  background: rgba(248, 113, 113, 0.18);
+  color: var(--color-danger);
+}
+
+.device-status {
+  align-content: start;
+  gap: var(--space-3);
+}
+
+.device-status__header h2 {
+  font-size: 0.9rem;
+  letter-spacing: 0.08em;
+}
+
+.device-status__badges {
+  display: flex;
+  flex-wrap: wrap;
+  gap: var(--space-2);
+}
+
+.device-status [data-online][data-status='offline'] {
+  background: rgba(248, 113, 113, 0.18);
+  color: var(--color-danger);
+}
+
+.device-status [data-input][data-mode='auto'] {
+  background: rgba(52, 211, 153, 0.18);
+  color: var(--color-success);
+}
+
+.kpi-grid__items {
+  display: grid;
+  gap: var(--space-4);
+}
+
+@media (min-width: 760px) {
+  .kpi-grid__items {
+    grid-template-columns: repeat(2, minmax(0, 1fr));
+  }
+}
+
+@media (min-width: 1200px) {
+  .kpi-grid__items {
+    grid-template-columns: repeat(4, minmax(0, 1fr));
+  }
+}
+
+.kpi-grid__card {
+  background: var(--color-surface-alt);
+  border-radius: var(--radius-lg);
+  padding: var(--space-4);
+  border: 1px solid rgba(148, 163, 184, 0.18);
+  display: grid;
+  gap: var(--space-2);
+}
+
+.kpi-grid__header {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  gap: var(--space-2);
+}
+
+.kpi-grid__header h3 {
+  font-size: 0.8rem;
+  letter-spacing: 0.08em;
+}
+
+.kpi-grid__value {
+  font-size: clamp(1.8rem, 1.6vw + 1.4rem, 2.6rem);
+  font-weight: 700;
+  color: var(--color-heading);
+  margin: 0;
+  font-variant-numeric: tabular-nums;
+}
+
+.ring-row {
+  gap: var(--space-4);
+}
+
+.ring-row__rings {
+  display: grid;
+  gap: var(--space-4);
+}
+
+@media (min-width: 760px) {
+  .ring-row__rings {
+    grid-template-columns: repeat(3, minmax(0, 1fr));
+  }
+}
+
+.ring-row__card {
+  background: var(--color-surface-alt);
+  border-radius: var(--radius-lg);
+  padding: var(--space-4);
+  border: 1px solid rgba(148, 163, 184, 0.18);
+  display: grid;
+  justify-items: center;
+  gap: var(--space-3);
+}
+
+.ring-row__card--heart {
+  align-self: stretch;
+}
+
+.ring {
+  --progress: 0;
+  --ring-color: var(--color-primary);
+  width: 160px;
+  height: 80px;
+  position: relative;
+  overflow: hidden;
+}
+
+.ring::before {
+  content: '';
+  position: absolute;
+  width: 160px;
+  height: 160px;
+  left: 0;
+  bottom: 0;
+  border-radius: 50%;
+  background: conic-gradient(var(--ring-color) calc(var(--progress) * 1%), rgba(148, 163, 184, 0.18) 0);
+  transform: rotate(180deg);
+  transition: background 0.3s ease;
+}
+
+.ring::after {
+  content: '';
+  position: absolute;
+  width: 120px;
+  height: 120px;
+  left: 20px;
+  bottom: -20px;
+  border-radius: 50%;
+  background: var(--color-surface);
+}
+
+.ring__content {
+  display: grid;
+  gap: var(--space-1);
+  justify-items: center;
+}
+
+.ring__label {
+  font-size: 0.8rem;
+  letter-spacing: 0.08em;
+  text-transform: uppercase;
+  color: var(--color-muted);
+}
+
+.ring__value {
+  font-size: 1.5rem;
+  font-weight: 600;
+  font-variant-numeric: tabular-nums;
+  color: var(--color-heading);
+}
+
+.facts-row {
+  gap: var(--space-4);
+}
+
+.facts-row__primary {
+  display: grid;
+  gap: var(--space-4);
+}
+
+@media (min-width: 760px) {
+  .facts-row__primary {
+    grid-template-columns: minmax(0, 1fr) minmax(0, 2fr);
+    align-items: start;
+  }
+}
+
+.facts-row__sleep {
+  background: var(--color-surface-alt);
+  border-radius: var(--radius-lg);
+  padding: var(--space-4);
+  border: 1px solid rgba(148, 163, 184, 0.18);
+  display: grid;
+  gap: var(--space-2);
+}
+
+.facts-row__sleep-value {
+  margin: 0;
+  font-size: clamp(1.4rem, 1.1vw + 1rem, 2rem);
+  font-weight: 600;
+  color: var(--color-heading);
+  font-variant-numeric: tabular-nums;
+}
+
+.facts-row__chips {
+  display: flex;
+  flex-wrap: wrap;
+  gap: var(--space-2);
+}
+
+.chip {
+  display: inline-flex;
+  align-items: center;
+  gap: var(--space-1);
+  padding: 0.4rem 0.75rem;
+  border-radius: 999px;
+  background: rgba(148, 163, 184, 0.18);
+  color: var(--color-muted);
+  font-size: 0.85rem;
+}
+
+.chip__value {
+  font-weight: 600;
+  color: var(--color-heading);
+  font-variant-numeric: tabular-nums;
+}
+
+.notes-card {
+  gap: var(--space-3);
+}
+
+.notes-card__header h2 {
+  font-size: 0.9rem;
+  letter-spacing: 0.08em;
+}
+
+.notes-card__header p {
+  color: var(--color-muted);
+  margin-top: var(--space-1);
+}
+
+.notes-card__field {
+  display: grid;
+  gap: var(--space-2);
+}
+
+.notes-card textarea {
+  width: 100%;
+  min-height: 140px;
+  padding: var(--space-3);
+  border-radius: var(--radius-lg);
+  border: 1px solid var(--color-border);
+  background: rgba(15, 23, 42, 0.35);
+  color: inherit;
+  font: inherit;
+  resize: vertical;
+  font-variant-numeric: tabular-nums;
+}
+
+.notes-card textarea:focus {
+  outline: 2px solid var(--color-primary);
+  outline-offset: 2px;
+}
+
+.notes-card__status {
+  min-height: 1rem;
+  font-size: 0.8rem;
+  color: var(--color-muted);
+}
+
+.table-wrapper {
+  overflow-x: auto;
+  border-radius: var(--radius-lg);
+  border: 1px solid var(--color-border);
+  background: var(--color-surface);
+  box-shadow: var(--shadow-xs);
+}
+
+.table-wrapper table {
+  width: 100%;
+  border-collapse: collapse;
+  min-width: 620px;
+}
+
+.table-wrapper thead {
+  background: var(--color-app-bg-muted);
+  color: var(--color-muted);
+  text-transform: uppercase;
+  font-size: 0.75rem;
+  letter-spacing: 0.06em;
+}
+
+.table-wrapper th,
+.table-wrapper td {
+  padding: var(--space-3) var(--space-4);
+  border-bottom: 1px solid var(--color-border);
+  text-align: left;
+}
+
+.table-wrapper tbody tr:hover {
+  background: rgba(148, 163, 184, 0.08);
+}
+
+.table-wrapper input,
+.table-wrapper textarea,
+.table-wrapper select {
+  width: 100%;
+  padding: 0.5rem 0.65rem;
+  border-radius: var(--radius-xs);
+  border: 1px solid var(--color-border);
+  background: transparent;
+  color: inherit;
+  font: inherit;
+}
+
+button,
+.button {
+  appearance: none;
+  border: none;
+  border-radius: var(--radius-xs);
+  background: var(--color-primary);
+  color: #fff;
+  font-weight: 600;
+  padding: 0.65rem 1.1rem;
+  cursor: pointer;
+  font-size: 0.95rem;
+  line-height: 1.2;
+  transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  gap: 0.35rem;
+  text-decoration: none;
+}
+
+button:hover,
+.button:hover,
+button:focus,
+.button:focus {
+  transform: translateY(-1px);
+  box-shadow: 0 10px 24px rgba(37, 99, 235, 0.28);
+}
+
+button.secondary,
+.button.secondary {
+  background: transparent;
+  color: var(--color-heading);
+  border: 1px solid var(--color-border);
+  box-shadow: none;
+}
+
+button.ghost,
+.button.ghost {
+  background: transparent;
+  color: var(--color-muted);
+  border: none;
+}
+
+button.danger {
+  background: var(--color-danger);
+}
+
+input,
+select,
+textarea {
+  font: inherit;
+  padding: 0.6rem 0.75rem;
+  border-radius: var(--radius-xs);
+  border: 1px solid var(--color-border);
+  background: rgba(255, 255, 255, 0.2);
+  color: inherit;
+  transition: border 0.2s ease, box-shadow 0.2s ease;
+}
+
+input:focus,
+select:focus,
+textarea:focus {
+  outline: none;
+  border-color: var(--color-primary);
+  box-shadow: 0 0 0 3px var(--color-primary-soft);
+}
+
+label {
+  display: grid;
+  gap: 0.4rem;
+  font-weight: 500;
+  color: var(--color-muted);
+}
+
+form {
+  display: grid;
+  gap: var(--space-4);
+  padding: var(--space-5);
+  background: var(--color-surface);
+  border-radius: var(--radius-lg);
+  border: 1px solid var(--color-border);
+  box-shadow: var(--shadow-sm);
+}
+
+.form-row {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+  gap: var(--space-3);
+}
+
+.toolbar {
+  display: flex;
+  flex-wrap: wrap;
+  gap: var(--space-2);
+  align-items: center;
+}
+
+.toast {
+  position: fixed;
+  bottom: var(--space-4);
+  right: var(--space-4);
+  background: rgba(15, 23, 42, 0.92);
+  color: #fff;
+  padding: 0.8rem 1.1rem;
+  border-radius: var(--radius-xs);
+  opacity: 0;
+  transform: translateY(12px);
+  transition: opacity 0.3s ease, transform 0.3s ease;
+  pointer-events: none;
+  z-index: 1000;
+  box-shadow: 0 16px 40px rgba(15, 23, 42, 0.35);
+}
+
+.toast.visible {
+  opacity: 1;
+  transform: translateY(0);
+}
+
+.update-toast {
+  position: fixed;
+  bottom: var(--space-4);
+  left: 50%;
+  transform: translate(-50%, 16px);
+  display: flex;
+  align-items: center;
+  gap: var(--space-2);
+  background: rgba(15, 118, 110, 0.92);
+  color: #ecfeff;
+  padding: 0.85rem 1.2rem;
+  border-radius: var(--radius-lg);
+  box-shadow: 0 24px 60px rgba(15, 23, 42, 0.35);
+  opacity: 0;
+  transition: opacity 0.3s ease, transform 0.3s ease;
+  z-index: 1100;
+}
+
+.update-toast.visible {
+  opacity: 1;
+  transform: translate(-50%, 0);
+}
+
+.update-toast__message {
+  font-weight: 600;
+  letter-spacing: 0.04em;
+  text-transform: uppercase;
+}
+
+@media (max-width: 640px) {
+  .update-toast {
+    width: calc(100% - 2rem);
+    left: 50%;
+  }
+}
+
+.quick-actions {
+  display: flex;
+  flex-wrap: wrap;
+  gap: var(--space-2);
+}
+
+.quick-actions button {
+  flex: 1 1 200px;
+  justify-content: flex-start;
+}
+
+.badge {
+  display: inline-flex;
+  align-items: center;
+  gap: 0.35rem;
+  padding: 0.35rem 0.6rem;
+  border-radius: 999px;
+  background: var(--color-primary-soft);
+  color: var(--color-primary);
+  font-size: 0.8rem;
+  font-weight: 600;
+}
+
+.diagnostics {
+  padding-bottom: var(--space-6);
+}
+
+.diagnostics__list {
+  display: grid;
+  gap: var(--space-2);
+}
+
+.diagnostics__list > div {
+  display: grid;
+  gap: 0.25rem;
+}
+
+.diagnostics__list dt {
+  font-size: 0.75rem;
+  text-transform: uppercase;
+  letter-spacing: 0.12em;
+  color: var(--color-muted);
+}
+
+.diagnostics__list dd {
+  margin: 0;
+  color: var(--color-heading);
+  font-weight: 600;
+}
+
+.diagnostics__routes {
+  list-style: none;
+  margin: 0;
+  padding: 0;
+  display: grid;
+  gap: 0.5rem;
+  font-family: 'JetBrains Mono', 'Fira Code', 'SFMono-Regular', Consolas, monospace;
+  font-size: 0.85rem;
+}
+
+.diagnostics__routes li {
+  display: flex;
+  flex-wrap: wrap;
+  align-items: baseline;
+  gap: 0.5rem;
+}
+
+.diagnostics__routes code {
+  padding: 0.1rem 0.4rem;
+  border-radius: 999px;
+  background: rgba(148, 163, 184, 0.16);
+  color: var(--color-heading);
+}
+
+.diagnostics__routes-meta {
+  margin: 0 0 0.75rem;
+  font-size: 0.85rem;
+  color: var(--color-muted);
+}
+
+.empty-state {
+  text-align: center;
+  padding: var(--space-5);
+  color: var(--color-muted);
+}
+
+.link-grid {
+  display: grid;
+  gap: var(--space-4);
+  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
+}
+
+.link-card {
+  background: var(--color-surface);
+  border: 1px solid var(--color-border);
+  border-radius: var(--radius-lg);
+  padding: var(--space-5);
+  text-align: center;
+  box-shadow: var(--shadow-sm);
+  display: grid;
+  gap: var(--space-3);
+}
+
+.link-card h1 {
+  margin: 0;
+  font-size: 1.5rem;
+  color: var(--color-heading);
+}
+
+.link-card p {
+  margin: 0;
+  color: var(--color-muted);
+}
+
+.link-card .button {
+  justify-self: center;
+}
+
+/* Map layout */
+
+.map-layout {
+  display: grid;
+  gap: var(--space-4);
+}
+
+@media (min-width: 1100px) {
+  .map-layout {
+    grid-template-columns: minmax(320px, 380px) 1fr;
+    align-items: stretch;
+  }
+}
+
+.map-sidebar {
+  display: grid;
+  gap: var(--space-4);
+  height: 100%;
+}
+
+.map-card {
+  background: var(--color-surface);
+  border: 1px solid var(--color-border);
+  border-radius: var(--radius-lg);
+  box-shadow: var(--shadow-xs);
+  padding: var(--space-4);
+  display: grid;
+  gap: var(--space-3);
+}
+
+.map-toolbar {
+  display: flex;
+  flex-wrap: wrap;
+  gap: var(--space-2);
+}
+
+.map-toolbar__spacer {
+  flex: 1 1 auto;
+}
+
+.map-selected-range {
+  font-size: 0.85rem;
+  color: var(--color-muted);
+  margin: 0;
+}
+
+.map-calendar {
+  display: grid;
+  gap: var(--space-3);
+}
+
+.map-calendar__header {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.map-calendar__header .ghost {
+  font-size: 1.25rem;
+  padding: 0.35rem 0.5rem;
+  line-height: 1;
+}
+
+.map-calendar__month {
+  font-weight: 600;
+}
+
+.map-calendar__grid {
+  display: grid;
+  grid-template-columns: repeat(7, minmax(0, 1fr));
+  gap: 0.35rem;
+}
+
+.map-calendar__grid--labels {
+  pointer-events: none;
+}
+
+.map-calendar__label {
+  text-align: center;
+  font-size: 0.75rem;
+  font-weight: 600;
+  text-transform: uppercase;
+  letter-spacing: 0.04em;
+  color: var(--color-muted);
+}
+
+.map-calendar__day {
+  border: 1px solid var(--color-border);
+  background: var(--color-surface-alt);
+  border-radius: var(--radius-sm);
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  justify-content: center;
+  gap: 0.25rem;
+  padding: 0.5rem 0.25rem;
+  font-size: 0.85rem;
+  cursor: pointer;
+  transition: border-color 0.2s ease, background 0.2s ease;
+  width: 100%;
+  min-height: 68px;
+  appearance: none;
+  color: inherit;
+  line-height: 1.1;
+}
+
+.map-calendar__day:hover {
+  border-color: var(--color-primary);
+}
+
+.map-calendar__day.is-outside {
+  opacity: 0.55;
+  background: var(--color-surface);
+}
+
+.map-calendar__day.has-data {
+  border-color: var(--color-primary);
+}
+
+.map-calendar__day.is-selected {
+  background: var(--color-primary);
+  border-color: var(--color-primary);
+  color: var(--color-white);
+}
+
+.map-calendar__day.is-today {
+  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.4);
+}
+
+.map-calendar__day.is-selected.is-today {
+  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.4);
+}
+
+.map-calendar__day:focus-visible {
+  outline: 2px solid var(--color-primary);
+  outline-offset: 2px;
+}
+
+.map-calendar__date {
+  font-weight: 600;
+}
+
+.map-calendar__count {
+  font-size: 0.7rem;
+  padding: 0.1rem 0.45rem;
+  border-radius: 999px;
+  background: var(--color-primary);
+  color: var(--color-white);
+}
+
+.map-calendar__day.is-selected .map-calendar__count {
+  background: rgba(15, 23, 42, 0.85);
+}
+
+.map-mode.is-active {
+  background: var(--color-primary);
+  border-color: var(--color-primary);
+  color: var(--color-white);
+}
+
+.map-list {
+  max-height: 320px;
+  overflow-y: auto;
+  display: grid;
+  gap: var(--space-2);
+  padding-right: 0.25rem;
+}
+
+.map-list-item {
+  padding: var(--space-3);
+  border-radius: var(--radius-sm);
+  border: 1px solid var(--color-border);
+  background: var(--color-surface-alt);
+  display: grid;
+  gap: 0.35rem;
+}
+
+.map-list-item__meta {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  gap: var(--space-2);
+  font-size: 0.85rem;
+  color: var(--color-muted);
+}
+
+.map-list-item__actions {
+  display: flex;
+  gap: var(--space-2);
+}
+
+.map-panel {
+  position: relative;
+  min-height: 480px;
+  border-radius: var(--radius-lg);
+  overflow: hidden;
+  border: 1px solid var(--color-border);
+  box-shadow: var(--shadow-sm);
+  background: var(--color-surface);
+}
+
+#map {
+  width: 100%;
+  height: clamp(320px, 60vh, 720px);
+}
+
+.map-panel .leaflet-control {
+  border-radius: var(--radius-xs) !important;
+}
+
+.map-panel .leaflet-popup-content-wrapper {
+  border-radius: var(--radius-xs);
+}
+
+.map-panel .leaflet-popup-content {
+  margin: var(--space-2);
+}
+
+.map-popup button {
+  font-size: 0.8rem;
+  padding: 0.4rem 0.6rem;
+  box-shadow: none;
+}
+
+.map-popup button.danger {
+  background: var(--color-danger);
+}
+
+.map-actions {
+  display: flex;
+  flex-wrap: wrap;
+  gap: var(--space-2);
+}
+
+fieldset {
+  border: none;
+  padding: 0;
+  margin: 0;
+}
+
+legend {
+  font-weight: 600;
+  margin-bottom: var(--space-2);
+}
+
+input[type='file'] {
+  display: none;
+}
+
+.sr-only {
+  position: absolute;
+  width: 1px;
+  height: 1px;
+  padding: 0;
+  margin: -1px;
+  overflow: hidden;
+  clip: rect(0, 0, 0, 0);
+  white-space: nowrap;
+  border: 0;
+}
+
+.tag {
+  display: inline-flex;
+  align-items: center;
+  gap: 0.3rem;
+  font-size: 0.75rem;
+  padding: 0.25rem 0.55rem;
+  border-radius: 999px;
+  background: var(--color-app-bg-muted);
+  color: var(--color-muted);
+  font-weight: 600;
+}
+
+@media (max-width: 640px) {
+  .app-main {
+    padding: var(--space-4);
+  }
+
+  .table-wrapper table {
+    min-width: 520px;
+  }
+}
diff -ruN legacy/health_old/app/health-cabinet/page.tsx app/health-cabinet/page.tsx
--- legacy/health_old/app/health-cabinet/page.tsx	1970-01-01 00:00:00.000000000 +0000
+++ app/health-cabinet/page.tsx	2025-10-08 07:42:47.373158293 +0000
@@ -0,0 +1,59 @@
+import DeviceStatusBanner from '@/components/health/DeviceStatusBanner';
+import DeviceStatusCard from '@/components/health/DeviceStatusCard';
+import DualGauge from '@/components/health/DualGauge';
+import FactsRow from '@/components/health/FactsRow';
+import KpiGrid from '@/components/health/KpiGrid';
+import NotesCard from '@/components/health/NotesCard';
+import RingRow from '@/components/health/RingRow';
+import VersionBadge from '@/components/version/VersionBadge';
+
+export const metadata = {
+  title: 'Health cabinet • Health 2099',
+};
+
+export default function HealthCabinetPage() {
+  return (
+    <div className="container flow health-dashboard" data-health-dashboard>
+      <header className="page-header health-dashboard__hero">
+        <div className="page-header__content">
+          <span className="page-header__eyebrow">Health cabinet</span>
+          <h1>Health cabinet</h1>
+          <p>Live snapshot of wellness metrics powered by personal diary data and wearables.</p>
+        </div>
+        <div className="page-header__meta">
+          <DeviceStatusBanner />
+          <VersionBadge variant="page" />
+        </div>
+      </header>
+
+      <section className="health-dashboard__top" data-section="top">
+        <DualGauge />
+        <DeviceStatusCard />
+      </section>
+
+      <section className="health-dashboard__kpi" data-section="kpi">
+        <KpiGrid />
+      </section>
+
+      <section className="health-dashboard__rings" data-section="rings">
+        <RingRow />
+      </section>
+
+      <section className="health-dashboard__facts" data-section="facts">
+        <FactsRow />
+      </section>
+
+      <section className="health-dashboard__notes" data-section="notes">
+        <NotesCard />
+      </section>
+
+      <section className="card card--settings" data-section="settings">
+        <h2>Cache controls</h2>
+        <p>Clear offline data and fetch the newest build if something looks outdated.</p>
+        <button type="button" className="button ghost" data-action="reset-cache" disabled>
+          Reset cache
+        </button>
+      </section>
+    </div>
+  );
+}
diff -ruN legacy/health_old/app/layout.tsx app/layout.tsx
--- legacy/health_old/app/layout.tsx	1970-01-01 00:00:00.000000000 +0000
+++ app/layout.tsx	2025-10-08 07:41:37.321562034 +0000
@@ -0,0 +1,21 @@
+import type { Metadata } from 'next';
+import './globals.css';
+import AppShell from '@/components/layout/AppShell';
+import { BuildInfoProvider } from '@/components/providers/BuildInfoProvider';
+
+export const metadata: Metadata = {
+  title: 'Health • 2099',
+  description: 'Diary, summary, map, and health cabinet insights in a unified dashboard.',
+};
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en">
+      <body className="app-shell">
+        <BuildInfoProvider>
+          <AppShell>{children}</AppShell>
+        </BuildInfoProvider>
+      </body>
+    </html>
+  );
+}
diff -ruN legacy/health_old/app/map/page.tsx app/map/page.tsx
--- legacy/health_old/app/map/page.tsx	1970-01-01 00:00:00.000000000 +0000
+++ app/map/page.tsx	2025-10-08 07:41:55.033463577 +0000
@@ -0,0 +1,24 @@
+export const metadata = {
+  title: 'Map • Health 2099',
+};
+
+export default function MapPage() {
+  return (
+    <div className="container flow">
+      <header className="page-header">
+        <div className="page-header__content">
+          <span className="page-header__eyebrow">Exploration</span>
+          <h1>Map</h1>
+          <p>Interactive maps are temporarily offline while the legacy UI is restored.</p>
+        </div>
+      </header>
+      <section className="card">
+        <h2>Map unavailable</h2>
+        <p>
+          Navigation features will be re-enabled after the primary dashboard and cabinet are
+          stabilised.
+        </p>
+      </section>
+    </div>
+  );
+}
diff -ruN legacy/health_old/app/page.tsx app/page.tsx
--- legacy/health_old/app/page.tsx	1970-01-01 00:00:00.000000000 +0000
+++ app/page.tsx	2025-10-08 07:41:41.317539792 +0000
@@ -0,0 +1,5 @@
+import { redirect } from 'next/navigation';
+
+export default function Home() {
+  redirect('/summary');
+}
diff -ruN legacy/health_old/app/summary/page.tsx app/summary/page.tsx
--- legacy/health_old/app/summary/page.tsx	1970-01-01 00:00:00.000000000 +0000
+++ app/summary/page.tsx	2025-10-08 07:41:46.709509794 +0000
@@ -0,0 +1,21 @@
+export const metadata = {
+  title: 'Summary • Health 2099',
+};
+
+export default function SummaryPage() {
+  return (
+    <div className="container flow">
+      <header className="page-header">
+        <div className="page-header__content">
+          <span className="page-header__eyebrow">Overview</span>
+          <h1>Summary</h1>
+          <p>High level overview of diary and wellness highlights.</p>
+        </div>
+      </header>
+      <section className="card">
+        <h2>Coming soon</h2>
+        <p>The summary experience is being restored. Check back soon for diary highlights.</p>
+      </section>
+    </div>
+  );
+}
diff -ruN legacy/health_old/components/diagnostics/DiagnosticsPanel.tsx components/diagnostics/DiagnosticsPanel.tsx
--- legacy/health_old/components/diagnostics/DiagnosticsPanel.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/diagnostics/DiagnosticsPanel.tsx	2025-10-08 07:43:18.484975753 +0000
@@ -0,0 +1,119 @@
+'use client';
+
+import { useEffect, useState } from 'react';
+import { useBuildInfo } from '@/components/providers/BuildInfoProvider';
+
+const ROUTES = [
+  { path: '/summary', title: 'Summary' },
+  { path: '/health-cabinet', title: 'Health cabinet' },
+  { path: '/diary', title: 'Diary' },
+  { path: '/map', title: 'Map' },
+  { path: '/__diagnostics', title: 'Diagnostics' },
+];
+
+type CssAsset = {
+  href: string;
+  size: string;
+  status: string;
+};
+
+function formatBytes(bytes: number) {
+  if (!Number.isFinite(bytes) || bytes <= 0) return 'unknown';
+  const units = ['B', 'KB', 'MB'];
+  const exponent = Math.min(Math.floor(Math.log(bytes) / Math.log(1024)), units.length - 1);
+  const size = bytes / Math.pow(1024, exponent);
+  return `${size.toFixed(size >= 10 ? 0 : 1)} ${units[exponent]}`;
+}
+
+export function DiagnosticsPanel() {
+  const info = useBuildInfo();
+  const [cssAssets, setCssAssets] = useState<CssAsset[]>([]);
+  const [swStatus, setSwStatus] = useState<'on' | 'off' | 'unknown'>('unknown');
+
+  useEffect(() => {
+    const collectCss = async () => {
+      const links = Array.from(document.querySelectorAll('link[rel="stylesheet"]')) as HTMLLinkElement[];
+      const results: CssAsset[] = [];
+      await Promise.all(
+        links.map(async (link) => {
+          const href = new URL(link.href, window.location.href).pathname;
+          try {
+            const response = await fetch(link.href, { method: 'HEAD' });
+            const contentLength = response.headers.get('content-length');
+            const size = contentLength ? formatBytes(Number(contentLength)) : 'unknown';
+            results.push({ href, size, status: `${response.status}` });
+          } catch (error) {
+            console.warn('[diagnostics] Failed to fetch CSS metadata', error);
+            results.push({ href, size: 'unknown', status: 'error' });
+          }
+        }),
+      );
+      setCssAssets(results);
+    };
+
+    collectCss();
+  }, []);
+
+  useEffect(() => {
+    if (typeof navigator === 'undefined' || !('serviceWorker' in navigator)) {
+      setSwStatus('off');
+      return;
+    }
+    navigator.serviceWorker
+      .getRegistrations()
+      .then((registrations) => {
+        setSwStatus(registrations.length > 0 ? 'on' : 'off');
+      })
+      .catch(() => setSwStatus('unknown'));
+  }, []);
+
+  return (
+    <div className="flow diagnostics" data-diagnostics-root>
+      <section className="card">
+        <h2>Build</h2>
+        <dl className="diagnostics__list" data-build-info>
+          <div>
+            <dt>Commit</dt>
+            <dd>{info.commit || 'Unknown'}</dd>
+          </div>
+          <div>
+            <dt>Built</dt>
+            <dd>{info.builtAt ? new Date(info.builtAt).toLocaleString() : 'Unknown'}</dd>
+          </div>
+          <div>
+            <dt>Service worker</dt>
+            <dd>{swStatus}</dd>
+          </div>
+        </dl>
+      </section>
+
+      <section className="card">
+        <h2>Routes</h2>
+        <ul className="diagnostics__routes" data-routes>
+          {ROUTES.map((route) => (
+            <li key={route.path}>
+              <code>{route.path}</code>
+              <span>{route.title}</span>
+            </li>
+          ))}
+        </ul>
+      </section>
+
+      <section className="card">
+        <h2>Stylesheets</h2>
+        <ul className="diagnostics__assets" data-css-assets>
+          {cssAssets.length === 0 && <li>No CSS linked</li>}
+          {cssAssets.map((asset) => (
+            <li key={asset.href}>
+              <code>{asset.href}</code>
+              <span>{asset.size}</span>
+              <span>Status: {asset.status}</span>
+            </li>
+          ))}
+        </ul>
+      </section>
+    </div>
+  );
+}
+
+export default DiagnosticsPanel;
diff -ruN legacy/health_old/components/health/DeviceStatus.js components/health/DeviceStatus.js
--- legacy/health_old/components/health/DeviceStatus.js	2025-10-08 07:23:24.000000000 +0000
+++ components/health/DeviceStatus.js	1970-01-01 00:00:00.000000000 +0000
@@ -1,56 +0,0 @@
-const INPUT_LABELS = {
-  manual: 'Manual',
-  auto: 'Auto',
-};
-
-function formatBattery(value) {
-  if (!Number.isFinite(value)) return '—';
-  return `${Math.max(0, Math.min(100, Math.round(value)))}%`;
-}
-
-export function createDeviceStatus() {
-  const section = document.createElement('section');
-  section.className = 'card device-status';
-  section.innerHTML = `
-    <header class="device-status__header">
-      <h2>Device status</h2>
-    </header>
-    <div class="device-status__badges">
-      <span class="badge" data-online>Online</span>
-      <span class="badge" data-battery>Battery</span>
-      <span class="badge" data-input>●○○ Manual</span>
-    </div>
-  `;
-
-  function update(snapshot) {
-    if (!snapshot) return;
-    const online = section.querySelector('[data-online]');
-    const battery = section.querySelector('[data-battery]');
-    const input = section.querySelector('[data-input]');
-
-    if (online) {
-      if (snapshot.online) {
-        online.textContent = 'Online';
-        online.dataset.status = 'online';
-      } else {
-        const minutes = Number.isFinite(snapshot.offline_min) ? Math.max(1, Math.round(snapshot.offline_min)) : 0;
-        online.textContent = minutes ? `Offline ${minutes}+ min` : 'Offline';
-        online.dataset.status = 'offline';
-      }
-    }
-
-    if (battery) {
-      battery.textContent = `Battery: ${formatBattery(snapshot.battery)}`;
-    }
-
-    if (input) {
-      const label = INPUT_LABELS[snapshot.input] || 'Manual';
-      input.textContent = `●○○ ${label}`;
-      input.dataset.mode = snapshot.input || 'manual';
-    }
-  }
-
-  return { element: section, update };
-}
-
-export default createDeviceStatus;
diff -ruN legacy/health_old/components/health/DeviceStatusBanner.tsx components/health/DeviceStatusBanner.tsx
--- legacy/health_old/components/health/DeviceStatusBanner.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/health/DeviceStatusBanner.tsx	2025-10-08 07:42:20.941311617 +0000
@@ -0,0 +1,33 @@
+'use client';
+
+import { useMemo } from 'react';
+import { selectors, useDashboard } from '@/stores/dashboard';
+
+export function DeviceStatusBanner() {
+  const device = useDashboard(selectors.device);
+  const text = useMemo(() => {
+    const parts: string[] = [];
+    if (device.online) {
+      parts.push('Device: Online');
+    } else {
+      const minutes = Number.isFinite(device.offline_min) ? Math.max(1, Math.round(device.offline_min)) : 0;
+      parts.push(minutes ? `Device: Offline ${minutes}+ min` : 'Device: Offline');
+    }
+    if (Number.isFinite(device.battery)) {
+      const percent = Math.max(0, Math.min(100, Math.round(device.battery)));
+      parts.push(`Battery ${percent}%`);
+    }
+    const mode = typeof device.input === 'string' ? device.input.toLowerCase() : 'manual';
+    const label =
+      mode === 'auto' ? '●●● auto' : mode === 'timeout' ? '●○● timeout' : '●○○ manual';
+    parts.push(label);
+    return parts.join(' · ');
+  }, [device.battery, device.input, device.offline_min, device.online]);
+  return (
+    <span className="badge page-header__badge" data-device-status>
+      {text}
+    </span>
+  );
+}
+
+export default DeviceStatusBanner;
diff -ruN legacy/health_old/components/health/DeviceStatusCard.tsx components/health/DeviceStatusCard.tsx
--- legacy/health_old/components/health/DeviceStatusCard.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/health/DeviceStatusCard.tsx	2025-10-08 07:42:35.645226488 +0000
@@ -0,0 +1,49 @@
+'use client';
+
+import { selectors, useDashboard } from '@/stores/dashboard';
+
+const INPUT_LABELS: Record<string, string> = {
+  manual: 'Manual',
+  auto: 'Auto',
+  timeout: 'Timeout',
+};
+
+function formatBattery(value: number) {
+  if (!Number.isFinite(value)) return '—';
+  return `${Math.max(0, Math.min(100, Math.round(value)))}%`;
+}
+
+export function DeviceStatusCard() {
+  const device = useDashboard(selectors.device);
+  const onlineLabel = device.online
+    ? 'Online'
+    : (() => {
+        const minutes = Number.isFinite(device.offline_min)
+          ? Math.max(1, Math.round(device.offline_min))
+          : 0;
+        return minutes ? `Offline ${minutes}+ min` : 'Offline';
+      })();
+  const mode = typeof device.input === 'string' ? device.input.toLowerCase() : 'manual';
+  const inputLabel = INPUT_LABELS[mode] || INPUT_LABELS.manual;
+
+  return (
+    <section className="card device-status">
+      <header className="device-status__header">
+        <h2>Device status</h2>
+      </header>
+      <div className="device-status__badges">
+        <span className="badge" data-online data-status={device.online ? 'online' : 'offline'}>
+          {onlineLabel}
+        </span>
+        <span className="badge" data-battery>
+          Battery: {formatBattery(device.battery)}
+        </span>
+        <span className="badge" data-input data-mode={mode}>
+          ●○○ {inputLabel}
+        </span>
+      </div>
+    </section>
+  );
+}
+
+export default DeviceStatusCard;
diff -ruN legacy/health_old/components/health/DualGauge.js components/health/DualGauge.js
--- legacy/health_old/components/health/DualGauge.js	2025-10-08 07:23:24.000000000 +0000
+++ components/health/DualGauge.js	1970-01-01 00:00:00.000000000 +0000
@@ -1,105 +0,0 @@
-const ZONES = [
-  { max: 39, className: 'danger' },
-  { max: 59, className: 'warning' },
-  { max: 79, className: 'success' },
-  { max: 100, className: 'primary' },
-];
-
-function resolveZone(value) {
-  const num = Number.isFinite(value) ? value : 0;
-  return ZONES.find((zone) => num <= zone.max) || ZONES[ZONES.length - 1];
-}
-
-function formatDelta(value) {
-  if (!Number.isFinite(value) || value === 0) return '0';
-  const prefix = value > 0 ? '+' : '';
-  return `${prefix}${value}`;
-}
-
-function setRing(el, value) {
-  if (!el) return;
-  const clamped = Math.max(0, Math.min(100, Number.isFinite(value) ? value : 0));
-  el.style.setProperty('--progress', clamped);
-  const zone = resolveZone(clamped);
-  el.dataset.zone = zone.className;
-}
-
-function updateCard(card, { label, value, delta }) {
-  if (!card) return;
-  const valueEl = card.querySelector('[data-value]');
-  const deltaEl = card.querySelector('[data-delta]');
-  const gaugeEl = card.querySelector('.dual-gauge__ring');
-  const labelEl = card.querySelector('[data-label]');
-  if (labelEl) labelEl.textContent = label;
-  if (valueEl) valueEl.textContent = Number.isFinite(value) ? Math.round(value).toString() : '—';
-  if (deltaEl) {
-    deltaEl.textContent = `Δ 15m · ${formatDelta(delta)}`;
-    deltaEl.dataset.trend = !Number.isFinite(delta)
-      ? 'neutral'
-      : delta > 0
-        ? 'up'
-        : delta < 0
-          ? 'down'
-          : 'neutral';
-  }
-  setRing(gaugeEl, value);
-}
-
-function updateConfidence(container, confidence) {
-  if (!container) return;
-  const confidenceEl = container.querySelector('[data-confidence]');
-  if (!confidenceEl) return;
-  const value = confidence === 'auto' ? 'Auto' : confidence === 'timeout' ? 'Timeout' : 'Manual';
-  confidenceEl.textContent = `●●● ${value}`;
-  confidenceEl.dataset.mode = confidence || 'manual';
-}
-
-export function createDualGauge() {
-  const section = document.createElement('section');
-  section.className = 'card dual-gauge';
-  section.innerHTML = `
-    <div class="dual-gauge__cards">
-      <div class="dual-gauge__card" data-kind="energy">
-        <div class="dual-gauge__ring" aria-hidden="true"><span class="dual-gauge__value" data-value>0</span></div>
-        <div class="dual-gauge__content">
-          <span class="dual-gauge__label" data-label>Energy</span>
-          <span class="dual-gauge__delta" data-delta data-caption>Δ 15m · 0</span>
-        </div>
-      </div>
-      <div class="dual-gauge__card" data-kind="srv">
-        <div class="dual-gauge__ring" aria-hidden="true"><span class="dual-gauge__value" data-value>0</span></div>
-        <div class="dual-gauge__content">
-          <span class="dual-gauge__label" data-label>SRV</span>
-          <span class="dual-gauge__delta" data-delta data-caption>Δ 15m · 0</span>
-        </div>
-      </div>
-    </div>
-    <footer class="dual-gauge__footer">
-      <span class="badge" data-confidence data-mode="manual">●●● Manual</span>
-    </footer>
-  `;
-
-  const cards = {
-    energy: section.querySelector('[data-kind="energy"]'),
-    srv: section.querySelector('[data-kind="srv"]'),
-  };
-
-  function update(snapshot) {
-    if (!snapshot) return;
-    updateCard(cards.energy, {
-      label: 'Energy',
-      value: snapshot.energy,
-      delta: snapshot.delta15m ? snapshot.delta15m.energy : 0,
-    });
-    updateCard(cards.srv, {
-      label: 'SRV',
-      value: snapshot.srv,
-      delta: snapshot.delta15m ? snapshot.delta15m.srv : 0,
-    });
-    updateConfidence(section, snapshot.confidence);
-  }
-
-  return { element: section, update };
-}
-
-export default createDualGauge;
diff -ruN legacy/health_old/components/health/DualGauge.tsx components/health/DualGauge.tsx
--- legacy/health_old/components/health/DualGauge.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/health/DualGauge.tsx	2025-10-08 07:39:53.990164016 +0000
@@ -0,0 +1,105 @@
+'use client';
+
+import { CSSProperties, useMemo } from 'react';
+import { selectors, useDashboard } from '@/stores/dashboard';
+
+const ZONES: Array<{ max: number; className: string }> = [
+  { max: 39, className: 'danger' },
+  { max: 59, className: 'warning' },
+  { max: 79, className: 'success' },
+  { max: 100, className: 'primary' },
+];
+
+function resolveZone(value: number) {
+  return ZONES.find((zone) => value <= zone.max) ?? ZONES[ZONES.length - 1];
+}
+
+function clampPercent(value: number) {
+  if (!Number.isFinite(value)) return 0;
+  return Math.max(0, Math.min(100, Math.round(value)));
+}
+
+function formatDelta(value: number) {
+  if (!Number.isFinite(value) || value === 0) return '0';
+  const rounded = Math.round(value);
+  const prefix = rounded > 0 ? '+' : '';
+  return `${prefix}${rounded}`;
+}
+
+function gaugeStyle(value: number): CSSProperties {
+  return {
+    ['--progress' as '--progress']: clampPercent(value),
+  } as CSSProperties;
+}
+
+const CONFIDENCE_LABELS: Record<string, string> = {
+  manual: 'Manual',
+  auto: 'Auto',
+  timeout: 'Timeout',
+};
+
+export function DualGauge() {
+  const gauges = useDashboard(selectors.gauges);
+
+  const cards = useMemo(
+    () => [
+      {
+        key: 'energy' as const,
+        label: 'Energy',
+        value: gauges.energy,
+        delta: gauges.delta15m?.energy ?? 0,
+      },
+      {
+        key: 'srv' as const,
+        label: 'SRV',
+        value: gauges.srv,
+        delta: gauges.delta15m?.srv ?? 0,
+      },
+    ],
+    [gauges.delta15m?.energy, gauges.delta15m?.srv, gauges.energy, gauges.srv],
+  );
+
+  const confidence = (gauges.confidence ?? 'manual').toString().toLowerCase();
+  const confidenceLabel = CONFIDENCE_LABELS[confidence] ?? CONFIDENCE_LABELS.manual;
+
+  return (
+    <section className="card dual-gauge">
+      <div className="dual-gauge__cards">
+        {cards.map((card) => {
+          const value = clampPercent(card.value ?? 0);
+          const zone = resolveZone(value);
+          const delta = formatDelta(card.delta ?? 0);
+          return (
+            <div className="dual-gauge__card" data-kind={card.key} key={card.key}>
+              <div
+                className="dual-gauge__ring"
+                data-zone={zone.className}
+                aria-hidden="true"
+                style={gaugeStyle(value)}
+              >
+                <span className="dual-gauge__value" data-value>
+                  {Number.isFinite(card.value) ? Math.round(card.value ?? 0) : '—'}
+                </span>
+              </div>
+              <div className="dual-gauge__content">
+                <span className="dual-gauge__label" data-label>
+                  {card.label}
+                </span>
+                <span className="dual-gauge__delta" data-delta data-caption>
+                  Δ 15m · {delta}
+                </span>
+              </div>
+            </div>
+          );
+        })}
+      </div>
+      <footer className="dual-gauge__footer">
+        <span className="badge" data-confidence data-mode={confidence}>
+          ●●● {confidenceLabel}
+        </span>
+      </footer>
+    </section>
+  );
+}
+
+export default DualGauge;
diff -ruN legacy/health_old/components/health/FactsRow.js components/health/FactsRow.js
--- legacy/health_old/components/health/FactsRow.js	2025-10-08 07:23:24.000000000 +0000
+++ components/health/FactsRow.js	1970-01-01 00:00:00.000000000 +0000
@@ -1,70 +0,0 @@
-import { badgeRules } from '../../health/dashboard-engine.js';
-
-const CHIP_ITEMS = [
-  { key: 'alcohol_yday', label: 'Alcohol (yesterday)' },
-  { key: 'symptoms', label: 'Illness symptoms' },
-  { key: 'energy_adj', label: 'Energy adj.' },
-  { key: 'late_meal', label: 'Late meal' },
-];
-
-function formatChipValue(key, value) {
-  if (key === 'energy_adj') {
-    if (!Number.isFinite(value)) return '0';
-    const prefix = value > 0 ? '+' : '';
-    return `${prefix}${value}`;
-  }
-  if (value == null) return '—';
-  return value ? 'Yes' : 'No';
-}
-
-export function createFactsRow() {
-  const section = document.createElement('section');
-  section.className = 'card facts-row';
-  section.innerHTML = `
-    <div class="facts-row__primary">
-      <article class="facts-row__sleep">
-        <h3>Sleep</h3>
-        <p class="facts-row__sleep-value" data-sleep-value>—</p>
-        <span class="badge" data-sleep-badge>—</span>
-      </article>
-      <div class="facts-row__chips" data-chips></div>
-    </div>
-  `;
-
-  const chipsContainer = section.querySelector('[data-chips]');
-  if (chipsContainer) {
-    CHIP_ITEMS.forEach((item) => {
-      const chip = document.createElement('span');
-      chip.className = 'chip';
-      chip.dataset.key = item.key;
-      chip.innerHTML = `<span class="chip__label">${item.label}</span><span class="chip__value" data-value>—</span>`;
-      chipsContainer.appendChild(chip);
-    });
-  }
-
-  function update(snapshot) {
-    const sleepValueEl = section.querySelector('[data-sleep-value]');
-    const sleepBadgeEl = section.querySelector('[data-sleep-badge]');
-    const hours = snapshot && Number.isFinite(snapshot.sleep_h) ? snapshot.sleep_h : null;
-    if (sleepValueEl) {
-      sleepValueEl.textContent = hours == null ? '—' : `${hours.toFixed(1)} h`;
-    }
-    if (sleepBadgeEl) {
-      sleepBadgeEl.textContent = badgeRules.sleep(hours);
-    }
-
-    CHIP_ITEMS.forEach((item) => {
-      const chip = chipsContainer ? chipsContainer.querySelector(`[data-key="${item.key}"]`) : null;
-      if (!chip) return;
-      const valueEl = chip.querySelector('[data-value]');
-      const raw = snapshot ? snapshot[item.key] : null;
-      if (valueEl) {
-        valueEl.textContent = formatChipValue(item.key, raw);
-      }
-    });
-  }
-
-  return { element: section, update };
-}
-
-export default createFactsRow;
diff -ruN legacy/health_old/components/health/FactsRow.tsx components/health/FactsRow.tsx
--- legacy/health_old/components/health/FactsRow.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/health/FactsRow.tsx	2025-10-08 07:40:28.269960947 +0000
@@ -0,0 +1,61 @@
+'use client';
+
+import { badgeRules, selectors, useDashboard } from '@/stores/dashboard';
+
+const CHIP_ITEMS = [
+  { key: 'alcohol_yday', label: 'Alcohol (yesterday)' },
+  { key: 'symptoms', label: 'Illness symptoms' },
+  { key: 'energy_adj', label: 'Energy adj.' },
+  { key: 'late_meal', label: 'Late meal' },
+] as const;
+
+type ChipKey = (typeof CHIP_ITEMS)[number]['key'];
+
+type ChipValue = number | boolean | null | undefined;
+
+function formatChipValue(key: ChipKey, value: ChipValue) {
+  if (key === 'energy_adj') {
+    if (!Number.isFinite(value as number)) return '0';
+    const rounded = Math.round(Number(value));
+    const prefix = rounded > 0 ? '+' : '';
+    return `${prefix}${rounded}`;
+  }
+  if (value == null) return '—';
+  return value ? 'Yes' : 'No';
+}
+
+export function FactsRow() {
+  const facts = useDashboard(selectors.facts);
+
+  const sleepHours = Number.isFinite(facts.sleep_h) ? Number(facts.sleep_h) : null;
+  const sleepValue = sleepHours == null ? '—' : `${sleepHours.toFixed(1)} h`;
+  const sleepBadge = badgeRules.sleep(sleepHours);
+
+  return (
+    <section className="card facts-row">
+      <div className="facts-row__primary">
+        <article className="facts-row__sleep">
+          <h3>Sleep</h3>
+          <p className="facts-row__sleep-value" data-sleep-value>
+            {sleepValue}
+          </p>
+          <span className="badge" data-sleep-badge>
+            {sleepBadge}
+          </span>
+        </article>
+        <div className="facts-row__chips" data-chips>
+          {CHIP_ITEMS.map((item) => (
+            <span className="chip" data-key={item.key} key={item.key}>
+              <span className="chip__label">{item.label}</span>
+              <span className="chip__value" data-value>
+                {formatChipValue(item.key, facts[item.key])}
+              </span>
+            </span>
+          ))}
+        </div>
+      </div>
+    </section>
+  );
+}
+
+export default FactsRow;
diff -ruN legacy/health_old/components/health/KpiGrid.js components/health/KpiGrid.js
--- legacy/health_old/components/health/KpiGrid.js	2025-10-08 07:23:24.000000000 +0000
+++ components/health/KpiGrid.js	1970-01-01 00:00:00.000000000 +0000
@@ -1,69 +0,0 @@
-import { badgeRules } from '../../health/dashboard-engine.js';
-
-const KPI_LABELS = [
-  { key: 'wellbeing7', title: 'Wellbeing score (week)' },
-  { key: 'cardio', title: 'Cardio-vascular' },
-  { key: 'risk', title: 'Risk of pathology' },
-  { key: 'arrhythmia', title: 'Arrhythmias' },
-];
-
-function resolveBadge(key, badge, value) {
-  if (badge) return badge;
-  switch (key) {
-    case 'wellbeing7':
-      return badgeRules.wellbeing(value);
-    case 'cardio':
-      return badgeRules.cardio(value);
-    case 'risk':
-      return badgeRules.risk(value);
-    case 'arrhythmia':
-      return badgeRules.arrhythmia(value);
-    default:
-      return '—';
-  }
-}
-
-export function createKpiGrid() {
-  const section = document.createElement('section');
-  section.className = 'card kpi-grid';
-  const list = document.createElement('div');
-  list.className = 'kpi-grid__items';
-
-  KPI_LABELS.forEach((item) => {
-    const card = document.createElement('article');
-    card.className = 'kpi-grid__card';
-    card.dataset.key = item.key;
-    card.innerHTML = `
-      <header class="kpi-grid__header">
-        <h3>${item.title}</h3>
-        <span class="badge" data-badge>—</span>
-      </header>
-      <p class="kpi-grid__value" data-value>0</p>
-    `;
-    list.appendChild(card);
-  });
-
-  section.appendChild(list);
-
-  function update(snapshot) {
-    KPI_LABELS.forEach((item) => {
-      const card = list.querySelector(`[data-key="${item.key}"]`);
-      if (!card) return;
-      const valueEl = card.querySelector('[data-value]');
-      const badgeEl = card.querySelector('[data-badge]');
-      const entry = snapshot ? snapshot[item.key] : null;
-      const value = entry && Number.isFinite(entry.value) ? Math.round(entry.value) : null;
-      if (valueEl) {
-        valueEl.textContent = value == null ? '—' : `${value}`;
-      }
-      if (badgeEl) {
-        const text = resolveBadge(item.key, entry?.badge, value ?? 0);
-        badgeEl.textContent = text;
-      }
-    });
-  }
-
-  return { element: section, update };
-}
-
-export default createKpiGrid;
diff -ruN legacy/health_old/components/health/KpiGrid.tsx components/health/KpiGrid.tsx
--- legacy/health_old/components/health/KpiGrid.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/health/KpiGrid.tsx	2025-10-08 07:40:01.642119406 +0000
@@ -0,0 +1,52 @@
+'use client';
+
+import { selectors, useDashboard, badgeRules } from '@/stores/dashboard';
+
+const KPI_LABELS = [
+  { key: 'wellbeing7', title: 'Wellbeing score (week)' },
+  { key: 'cardio', title: 'Cardio-vascular' },
+  { key: 'risk', title: 'Risk of pathology' },
+  { key: 'arrhythmia', title: 'Arrhythmias' },
+] as const;
+
+type KpiKey = (typeof KPI_LABELS)[number]['key'];
+
+type BadgeResolver = (value: number) => string;
+
+const FALLBACK_BADGES: Record<KpiKey, BadgeResolver> = {
+  wellbeing7: badgeRules.wellbeing,
+  cardio: badgeRules.cardio,
+  risk: badgeRules.risk,
+  arrhythmia: badgeRules.arrhythmia,
+};
+
+export function KpiGrid() {
+  const kpi = useDashboard(selectors.kpi);
+
+  return (
+    <section className="card kpi-grid">
+      <div className="kpi-grid__items">
+        {KPI_LABELS.map((item) => {
+          const entry = kpi[item.key];
+          const value = Number.isFinite(entry?.value) ? Math.round(entry?.value ?? 0) : null;
+          const badge = entry?.badge || FALLBACK_BADGES[item.key](value ?? 0);
+          return (
+            <article className="kpi-grid__card" data-key={item.key} key={item.key}>
+              <header className="kpi-grid__header">
+                <h3>{item.title}</h3>
+                <span className="badge" data-badge>
+                  {badge}
+                </span>
+              </header>
+              <p className="kpi-grid__value" data-value>
+                {value == null ? '—' : value}
+              </p>
+            </article>
+          );
+        })}
+      </div>
+    </section>
+  );
+}
+
+export default KpiGrid;
diff -ruN legacy/health_old/components/health/NotesCard.js components/health/NotesCard.js
--- legacy/health_old/components/health/NotesCard.js	2025-10-08 07:23:24.000000000 +0000
+++ components/health/NotesCard.js	1970-01-01 00:00:00.000000000 +0000
@@ -1,72 +0,0 @@
-import { dashboard } from '../../stores/dashboard.js';
-
-const SAVE_DELAY = 600;
-
-export function createNotesCard() {
-  const section = document.createElement('section');
-  section.className = 'card notes-card';
-  section.innerHTML = `
-    <header class="notes-card__header">
-      <h2>Notes</h2>
-      <p>Recommendations will appear later (based on Energy / SRV / Stress).</p>
-    </header>
-    <label class="notes-card__field">
-      <span class="visually-hidden">Notes</span>
-      <textarea rows="4" data-notes placeholder="Add personal observations..." spellcheck="false"></textarea>
-      <span class="notes-card__status" aria-live="polite" data-status></span>
-    </label>
-  `;
-
-  const textarea = section.querySelector('[data-notes]');
-  const statusEl = section.querySelector('[data-status]');
-  let saveTimer = null;
-  let lastValue = '';
-  let isFocused = false;
-
-  function scheduleSave(value) {
-    if (saveTimer) {
-      clearTimeout(saveTimer);
-    }
-    if (statusEl) {
-      statusEl.textContent = 'Saving…';
-    }
-    saveTimer = setTimeout(() => {
-      dashboard.updateNotes(value);
-      if (statusEl) {
-        statusEl.textContent = 'Saved';
-      }
-      saveTimer = null;
-    }, SAVE_DELAY);
-  }
-
-  if (textarea) {
-    textarea.addEventListener('input', (event) => {
-      const value = event.target.value;
-      lastValue = value;
-      scheduleSave(value);
-    });
-    textarea.addEventListener('focus', () => {
-      isFocused = true;
-    });
-    textarea.addEventListener('blur', () => {
-      isFocused = false;
-      if (saveTimer || !statusEl) return;
-      statusEl.textContent = '';
-    });
-  }
-
-  function update(notes) {
-    const nextValue = typeof notes === 'string' ? notes : '';
-    if (textarea && !isFocused) {
-      textarea.value = nextValue;
-      lastValue = nextValue;
-    }
-    if (!nextValue && statusEl) {
-      statusEl.textContent = '';
-    }
-  }
-
-  return { element: section, update };
-}
-
-export default createNotesCard;
diff -ruN legacy/health_old/components/health/NotesCard.tsx components/health/NotesCard.tsx
--- legacy/health_old/components/health/NotesCard.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/health/NotesCard.tsx	2025-10-08 07:40:44.473866384 +0000
@@ -0,0 +1,84 @@
+'use client';
+
+import { ChangeEvent, useEffect, useRef, useState } from 'react';
+import { dashboard, selectors, useDashboard } from '@/stores/dashboard';
+
+const SAVE_DELAY = 600;
+
+export function NotesCard() {
+  const notes = useDashboard(selectors.notes);
+  const [draft, setDraft] = useState(() => (typeof notes === 'string' ? notes : ''));
+  const [status, setStatus] = useState('');
+  const timerRef = useRef<NodeJS.Timeout | null>(null);
+  const isFocusedRef = useRef(false);
+
+  useEffect(() => {
+    if (!isFocusedRef.current) {
+      setDraft(typeof notes === 'string' ? notes : '');
+    }
+  }, [notes]);
+
+  useEffect(() => {
+    return () => {
+      if (timerRef.current) {
+        clearTimeout(timerRef.current);
+      }
+    };
+  }, []);
+
+  const scheduleSave = (value: string) => {
+    if (timerRef.current) {
+      clearTimeout(timerRef.current);
+    }
+    setStatus('Saving…');
+    timerRef.current = setTimeout(() => {
+      dashboard.updateNotes(value);
+      setStatus(value ? 'Saved' : '');
+      timerRef.current = null;
+    }, SAVE_DELAY);
+  };
+
+  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {
+    const value = event.target.value;
+    setDraft(value);
+    scheduleSave(value);
+  };
+
+  const handleFocus = () => {
+    isFocusedRef.current = true;
+  };
+
+  const handleBlur = () => {
+    isFocusedRef.current = false;
+    if (!timerRef.current && !draft) {
+      setStatus('');
+    }
+  };
+
+  return (
+    <section className="card notes-card">
+      <header className="notes-card__header">
+        <h2>Notes</h2>
+        <p>Recommendations will appear later (based on Energy / SRV / Stress).</p>
+      </header>
+      <label className="notes-card__field">
+        <span className="visually-hidden">Notes</span>
+        <textarea
+          rows={4}
+          data-notes
+          placeholder="Add personal observations..."
+          spellCheck={false}
+          value={draft}
+          onChange={handleChange}
+          onFocus={handleFocus}
+          onBlur={handleBlur}
+        />
+        <span className="notes-card__status" aria-live="polite" data-status>
+          {status}
+        </span>
+      </label>
+    </section>
+  );
+}
+
+export default NotesCard;
diff -ruN legacy/health_old/components/health/RingRow.js components/health/RingRow.js
--- legacy/health_old/components/health/RingRow.js	2025-10-08 07:23:24.000000000 +0000
+++ components/health/RingRow.js	1970-01-01 00:00:00.000000000 +0000
@@ -1,74 +0,0 @@
-import { badgeRules } from '../../health/dashboard-engine.js';
-
-const RING_ITEMS = [
-  { key: 'stress', title: 'Stress' },
-  { key: 'burnout', title: 'Burnout' },
-  { key: 'fatigue', title: 'Fatigue' },
-];
-
-export function createRingRow() {
-  const section = document.createElement('section');
-  section.className = 'card ring-row';
-  const ringsContainer = document.createElement('div');
-  ringsContainer.className = 'ring-row__rings';
-
-  RING_ITEMS.forEach((item) => {
-    const card = document.createElement('article');
-    card.className = 'ring-row__card';
-    card.dataset.key = item.key;
-    card.innerHTML = `
-      <div class="ring" aria-hidden="true"></div>
-      <div class="ring__content">
-        <span class="ring__label">${item.title}</span>
-        <span class="ring__value" data-value>0%</span>
-      </div>
-    `;
-    ringsContainer.appendChild(card);
-  });
-
-  const heartCard = document.createElement('article');
-  heartCard.className = 'ring-row__card ring-row__card--heart';
-  heartCard.innerHTML = `
-    <div class="ring__content">
-      <span class="ring__label">Heart age</span>
-      <span class="ring__value" data-heart-value>0</span>
-      <span class="badge" data-heart-badge>—</span>
-    </div>
-  `;
-
-  section.appendChild(ringsContainer);
-  section.appendChild(heartCard);
-
-  function update(snapshot) {
-    RING_ITEMS.forEach((item) => {
-      const card = ringsContainer.querySelector(`[data-key="${item.key}"]`);
-      if (!card) return;
-      const value = snapshot && Number.isFinite(snapshot[item.key]) ? Math.max(0, Math.min(100, Math.round(snapshot[item.key]))) : null;
-      const valueEl = card.querySelector('[data-value]');
-      const ring = card.querySelector('.ring');
-      if (valueEl) {
-        valueEl.textContent = value == null ? '—' : `${value}%`;
-      }
-      if (ring) {
-        const percent = value == null ? 0 : value;
-        ring.style.setProperty('--progress', percent);
-      }
-    });
-
-    const heartValueEl = heartCard.querySelector('[data-heart-value]');
-    const heartBadgeEl = heartCard.querySelector('[data-heart-badge]');
-    const heart = snapshot?.heartAge;
-    const heartValue = heart && Number.isFinite(heart.value) ? Math.round(heart.value) : null;
-    if (heartValueEl) {
-      heartValueEl.textContent = heartValue == null ? '—' : `${heartValue}`;
-    }
-    if (heartBadgeEl) {
-      const badge = heart?.badge || (heartValue == null ? '—' : badgeRules.cardio(heartValue));
-      heartBadgeEl.textContent = badge;
-    }
-  }
-
-  return { element: section, update };
-}
-
-export default createRingRow;
diff -ruN legacy/health_old/components/health/RingRow.tsx components/health/RingRow.tsx
--- legacy/health_old/components/health/RingRow.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/health/RingRow.tsx	2025-10-08 07:40:18.270021821 +0000
@@ -0,0 +1,57 @@
+'use client';
+
+import { CSSProperties } from 'react';
+import { badgeRules, selectors, useDashboard } from '@/stores/dashboard';
+
+const RING_ITEMS = [
+  { key: 'stress', title: 'Stress' },
+  { key: 'burnout', title: 'Burnout' },
+  { key: 'fatigue', title: 'Fatigue' },
+] as const;
+
+function ringStyle(value: number): CSSProperties {
+  return {
+    ['--progress' as '--progress']: Math.max(0, Math.min(100, Math.round(value ?? 0))),
+  } as CSSProperties;
+}
+
+export function RingRow() {
+  const rings = useDashboard(selectors.rings);
+
+  return (
+    <section className="card ring-row">
+      <div className="ring-row__rings">
+        {RING_ITEMS.map((item) => {
+          const value = Number.isFinite(rings[item.key]) ? Math.round(rings[item.key] ?? 0) : null;
+          return (
+            <article className="ring-row__card" data-key={item.key} key={item.key}>
+              <div className="ring" aria-hidden="true" style={ringStyle(value ?? 0)} />
+              <div className="ring__content">
+                <span className="ring__label">{item.title}</span>
+                <span className="ring__value" data-value>
+                  {value == null ? '—' : `${value}%`}
+                </span>
+              </div>
+            </article>
+          );
+        })}
+      </div>
+      <article className="ring-row__card ring-row__card--heart">
+        <div className="ring__content">
+          <span className="ring__label">Heart age</span>
+          <span className="ring__value" data-heart-value>
+            {Number.isFinite(rings.heartAge?.value) ? Math.round(rings.heartAge.value) : '—'}
+          </span>
+          <span className="badge" data-heart-badge>
+            {rings.heartAge?.badge ||
+              (Number.isFinite(rings.heartAge?.value)
+                ? badgeRules.cardio(Math.round(rings.heartAge.value))
+                : '—')}
+          </span>
+        </div>
+      </article>
+    </section>
+  );
+}
+
+export default RingRow;
diff -ruN legacy/health_old/components/layout/AppShell.tsx components/layout/AppShell.tsx
--- legacy/health_old/components/layout/AppShell.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/layout/AppShell.tsx	2025-10-08 07:41:31.281594748 +0000
@@ -0,0 +1,74 @@
+'use client';
+
+import Link from 'next/link';
+import { usePathname } from 'next/navigation';
+import { ReactNode, useEffect } from 'react';
+import clsx from 'clsx';
+import VersionBadge from '@/components/version/VersionBadge';
+
+const NAV_ITEMS = [
+  { href: '/summary', label: 'Summary', key: 'summary' },
+  { href: '/health-cabinet', label: 'Health cabinet', key: 'health' },
+  { href: '/diary', label: 'Diary', key: 'diary' },
+  { href: '/map', label: 'Map', key: 'map' },
+] as const;
+
+function toPageKey(pathname: string | null) {
+  if (!pathname) return 'summary';
+  if (pathname === '/' || pathname === '') return 'summary';
+  if (pathname.startsWith('/health-cabinet')) return 'health';
+  if (pathname.startsWith('/diary')) return 'diary';
+  if (pathname.startsWith('/map')) return 'map';
+  if (pathname.startsWith('/summary')) return 'summary';
+  if (pathname.startsWith('/__diagnostics')) return 'diagnostics';
+  return pathname.replace(/^\//, '') || 'summary';
+}
+
+function isActive(pathname: string, href: string) {
+  if (href === '/summary' && (pathname === '/' || pathname === '/summary')) {
+    return true;
+  }
+  if (pathname === href) return true;
+  return pathname.startsWith(`${href}/`);
+}
+
+export function AppShell({ children }: { children: ReactNode }) {
+  const pathname = usePathname() || '/summary';
+
+  useEffect(() => {
+    if (typeof document === 'undefined') return;
+    const key = toPageKey(pathname);
+    document.body.dataset.page = key;
+    return () => {
+      delete document.body.dataset.page;
+    };
+  }, [pathname]);
+
+  return (
+    <>
+      <aside className="sidebar">
+        <div className="brand">
+          <Link className="brand-link" href="/summary">
+            Health • 2099
+          </Link>
+          <VersionBadge />
+        </div>
+        <nav className="nav" aria-label="Primary">
+          {NAV_ITEMS.map((item) => (
+            <Link
+              key={item.href}
+              href={item.href}
+              data-nav={item.key}
+              className={clsx('nav-link', { active: isActive(pathname, item.href) })}
+            >
+              <span>{item.label}</span>
+            </Link>
+          ))}
+        </nav>
+      </aside>
+      <main className="app-main">{children}</main>
+    </>
+  );
+}
+
+export default AppShell;
diff -ruN legacy/health_old/components/providers/BuildInfoProvider.tsx components/providers/BuildInfoProvider.tsx
--- legacy/health_old/components/providers/BuildInfoProvider.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/providers/BuildInfoProvider.tsx	2025-10-08 07:41:13.709696307 +0000
@@ -0,0 +1,82 @@
+'use client';
+
+import { createContext, useContext, useEffect, useMemo, useState } from 'react';
+
+export type BuildInfo = {
+  commit: string;
+  commitShort: string;
+  builtAt: string;
+};
+
+const defaultInfo: BuildInfo = {
+  commit: '',
+  commitShort: 'dev',
+  builtAt: '',
+};
+
+const BuildInfoContext = createContext<BuildInfo>(defaultInfo);
+
+function normalize(info: Partial<BuildInfo> | null | undefined): BuildInfo {
+  const commit = typeof info?.commit === 'string' && info.commit.length > 0 ? info.commit : '';
+  const builtAt = typeof info?.builtAt === 'string' ? info.builtAt : '';
+  const short = info?.commitShort || (commit ? commit.slice(0, 7) : 'dev');
+  return {
+    commit,
+    builtAt,
+    commitShort: short,
+  };
+}
+
+export function BuildInfoProvider({ children }: { children: React.ReactNode }) {
+  const [info, setInfo] = useState<BuildInfo>(defaultInfo);
+
+  useEffect(() => {
+    let cancelled = false;
+
+    async function load() {
+      try {
+        const response = await fetch('/version.json', { cache: 'no-store' });
+        if (!response.ok) return;
+        const payload = await response.json();
+        if (!cancelled) {
+          setInfo(normalize(payload));
+        }
+      } catch (error) {
+        console.warn('[build-info] Failed to load version.json', error);
+      }
+    }
+
+    load();
+
+    const handleBuildInfo = (event: Event) => {
+      if (!(event instanceof CustomEvent)) return;
+      const detail = event.detail as Partial<BuildInfo> | undefined;
+      if (!detail) return;
+      setInfo((current) => {
+        const next = normalize({ ...current, ...detail });
+        return next;
+      });
+    };
+
+    if (typeof window !== 'undefined') {
+      window.addEventListener('build:info', handleBuildInfo as EventListener);
+    }
+
+    return () => {
+      cancelled = true;
+      if (typeof window !== 'undefined') {
+        window.removeEventListener('build:info', handleBuildInfo as EventListener);
+      }
+    };
+  }, []);
+
+  const value = useMemo(() => info, [info.commit, info.commitShort, info.builtAt]);
+
+  return <BuildInfoContext.Provider value={value}>{children}</BuildInfoContext.Provider>;
+}
+
+export function useBuildInfo() {
+  return useContext(BuildInfoContext);
+}
+
+export default BuildInfoProvider;
diff -ruN legacy/health_old/components/version/VersionBadge.tsx components/version/VersionBadge.tsx
--- legacy/health_old/components/version/VersionBadge.tsx	1970-01-01 00:00:00.000000000 +0000
+++ components/version/VersionBadge.tsx	2025-10-08 07:40:58.517784301 +0000
@@ -0,0 +1,47 @@
+'use client';
+
+import { useMemo } from 'react';
+import clsx from 'clsx';
+import { useBuildInfo } from '@/components/providers/BuildInfoProvider';
+
+type VersionBadgeProps = {
+  className?: string;
+  variant?: 'nav' | 'page';
+};
+
+export function VersionBadge({ className, variant = 'nav' }: VersionBadgeProps) {
+  const info = useBuildInfo();
+
+  const { label, title } = useMemo(() => {
+    const commitShort = info.commitShort || (info.commit ? info.commit.slice(0, 7) : 'dev');
+    const badgeLabel = `v:${commitShort}`;
+    const lines: string[] = [];
+    if (info.commit) {
+      lines.push(`Commit ${info.commit}`);
+    }
+    if (info.builtAt) {
+      const built = new Date(info.builtAt);
+      lines.push(
+        Number.isNaN(built.getTime()) ? `Built ${info.builtAt}` : `Built ${built.toLocaleString()}`,
+      );
+    }
+    return { label: badgeLabel, title: lines.join('\n') };
+  }, [info.builtAt, info.commit, info.commitShort]);
+
+  return (
+    <span
+      className={clsx(
+        variant === 'page'
+          ? 'badge page-header__badge page-header__badge--version'
+          : 'build-badge',
+        className,
+      )}
+      data-version-badge
+      title={title}
+    >
+      {label}
+    </span>
+  );
+}
+
+export default VersionBadge;
--- legacy/health_old/package.json	2025-10-08 07:23:24.000000000 +0000
+++ package.json	2025-10-08 07:36:38.383323711 +0000
@@ -4,18 +4,34 @@
   "private": true,
   "description": "Diary, summary, and map snapshots with offline support.",
   "scripts": {
-    "start": "npx serve .",
-    "build": "node scripts/generate-version.mjs",
+    "dev": "next dev",
+    "build": "npm run generate:version && next build",
+    "start": "next start",
+    "lint": "next lint",
+    "generate:version": "node scripts/generate-version.mjs",
     "cap:init": "npx cap init Health2099 com.health2099.app --web-dir . --npm-client npm",
     "cap:copy": "npx cap copy",
     "cap:sync": "npx cap sync",
     "cap:open:android": "npx cap open android"
   },
   "dependencies": {
-    "@capacitor/core": "^5.7.4"
+    "@capacitor/core": "^5.7.4",
+    "clsx": "^2.1.1",
+    "next": "^14.2.5",
+    "react": "^18.3.1",
+    "react-dom": "^18.3.1"
   },
   "devDependencies": {
+    "@capacitor/android": "^5.7.4",
     "@capacitor/cli": "^5.7.4",
-    "@capacitor/android": "^5.7.4"
+    "@types/node": "^20.12.7",
+    "@types/react": "^18.2.79",
+    "@types/react-dom": "^18.2.25",
+    "autoprefixer": "^10.4.17",
+    "eslint": "^8.57.0",
+    "eslint-config-next": "^14.2.5",
+    "postcss": "^8.4.38",
+    "tailwindcss": "^3.4.4",
+    "typescript": "^5.4.5"
   }
 }
